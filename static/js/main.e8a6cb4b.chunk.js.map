{"version":3,"sources":["components/Main/HtmlContent/HtmlBasic.jsx","components/Main/CssContent/CssBasic.jsx","components/Main/JspServletContent/JspServletInformation.jsx","components/Main/JavaContent/JavaBasic.jsx","components/Main/JspServletContent/JspServletBasic.jsx","components/Main/JspServletContent/JspServletBulletinBoard.jsx","components/Main/JspServletContent/JspServletJstl.jsx","components/Main/JspServletContent/JspServletEl.jsx","components/Main/ReactContent/ReactBasic.jsx","components/Main/SpringContent/SpringInformation.jsx","components/Main/SpringContent/SpringBasic.jsx","components/Main/SpringContent/SpringLibrary.jsx","components/Main/SpringContent/SpringError.jsx","components/Main/SpringContent/SpringCode.jsx","components/Main/SpringContent/SpringExCode1.jsx","components/Main/WindowContent/WindowCommand.jsx","components/Main/KeyMapContent/KeyMap.jsx","components/Main/TermContent/Term.jsx","components/Main/GithubContent/GithubBasic.jsx","components/Main.jsx","components/LsideMenu/HtmlList.jsx","components/LsideMenu/CssList.jsx","components/LsideMenu/JavaSciptList.jsx","components/LsideMenu/ReactList.jsx","components/LsideMenu/JavaList.jsx","components/LsideMenu/PhpList.jsx","components/LsideMenu/NodeJsList.jsx","components/LsideMenu/JspServletList.jsx","components/LsideMenu/SpringList.jsx","components/LsideMenu/WindowList.jsx","components/LsideMenu/TermList.jsx","components/LsideMenu/KeyMapList.jsx","components/LsideMenu/GithubList.jsx","components/NavMenu.jsx","components/NavMenu2.jsx","App.js","reportWebVitals.js","index.js"],"names":["HtmlBasic","className","href","name","target","style","backgroundColor","textDecoration","src","process","alt","width","method","action","type","placeholder","required","value","htmlFor","id","cols","rows","resize","border","overflow","selected","disabled","label","marginLeft","background","colSpan","rowSpan","CssBasic","props","JspServletInformation","JavaBasic","JspServletBasic","JspServletBulletinBoard","JspServletJstl","Blank","ReactBasic","clsssName","SpringInformation","SpringBasic","SpringLibrary","SpringCode","SpringExCode1","WindowCommand","KeyMap","GithubBasic","Main","page2","JspServletEl","SpringError","Term","showpage","HtmlList","onClick","onChangePage","CssList","JavaSciptList","ReactList","JavaList","PhpList","NodeJsList","JspServletList","send","SpringList","WindowList","TermList","KeyMapList","GithubList","NavMenu","page","NavMenu2","title","document","querySelector","innerHTML","App","useState","whatPage","setWhatPage","whatPage2","setWhatPage2","e","changePage","changePage2","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8a6cb4b.chunk.js","sourcesContent":["import React from 'react';\r\nconst HtmlBasic = () => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. 태그의 종류(하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#주석\">1.주석</a>\r\n                        <a href=\"#특수문자\">2.특수문자</a>\r\n                        <a href=\"#div태그\">3.div태그</a>\r\n                        <a href=\"#span태그\">4.span태그</a>\r\n                        <a href=\"#h태그\">5.h태그</a>\r\n                        <a href=\"#p태그\">6.p태그</a>\r\n                        <a href=\"#스타일 관련 태그\">7.스타일 관련 태그</a>\r\n                        <a href=\"#시멘틱 태그\">8.시멘틱 태그</a>\r\n                        <a href=\"#a태그\">9.a태그</a>\r\n                        <a href=\"#link태그\">10.link태그</a>\r\n                        <a href=\"#img태그\">11.img태그</a>\r\n                        <a href=\"#input태그\">12.input태그</a>\r\n                        <a href=\"#form태그\">13.form태그</a>\r\n                        <a href=\"#label태그\">13.1.label태그</a>\r\n                        <a href=\"#list태그\">14.list태그</a>\r\n                        <a href=\"#table태그\">15.table태그</a>\r\n                        <a href=\"#detail태그\">16.detail태그</a>\r\n\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"주석\"> 1. HTML 주석 </a> </span>\r\n                <p> 특징 : </p>\r\n                <p> 1. 주석은 컴퓨터는 인식하지 못하고 사람만 인식이 가능한 설명문이다. </p>\r\n                <span className=\"mblock\">\r\n                    <p> &lt; !-- 설명문 작성 -- &gt; </p>\r\n                    <span> &lt; !-- 여기는 주석을 적는 공간입니다 -- &gt; </span>\r\n                    <p> 현재는 리액트를 사용하여 보이지만 HTML에서는 보이지 않는다. </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"특수문자\"> 2. 특수문자 </a> </span>\r\n                <p> 특징 : </p>\r\n                <p> &lt; , &gt; , &amp; , &quot; , &copy; , &nbsp; </p>\r\n                <p> 위에 있는 문자들은 HTML문법과 동일한 문자들이 있어서 사용하려면 겹쳐서 에러가 발생하게 된다</p>\r\n                <p> 그래서 사용하려면 다른 문자의 결합으로 작성해야 한다.</p>\r\n                <p> <a href=\"https://dev.w3.org/html5/html-author/charref\" target=\"_blank\"> Entity Code </a> </p>\r\n                <span className=\"mblock\">\r\n                    <p> &lt; : &amp;lt; , 좌측 화살표</p>\r\n                    <p> &gt; : &amp;gt; , 우측 화살표</p>\r\n                    <p> &amp; : &amp;amp; , and문자 </p>\r\n                    <p> &quot; : &amp;quot; , 쌍따옴표</p>\r\n                    <p> &copy; : &amp;copy; , 카피라이터 문자</p>\r\n                    <p> &nbsp; : &amp;nbsp; , 띄어쓰기</p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"div태그\"> 3. div태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. block이라는 속성만 가지며 아무런 특징이 없다. </p>\r\n                <p> block이란 가로 공간을 전부 차지하는 것이다. </p>\r\n                <span className=\"mblock\">\r\n                    <p> &lt; div style=\"background-color:red\"&gt; &lt; /div &gt; </p>\r\n                    <div style={{ backgroundColor: 'red' }}> div태그의 예시 </div>\r\n                    <p> 블록속성을 가지고 있어 빨갛게 길게 칠해지는것을 볼 수 있다.</p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"span태그\"> 4. span태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. inline이라는 속성만 가지며 아무런 특징이 없다. </p>\r\n                <p> inline이란 글자가 있는 공간만 차지하는 것이다. </p>\r\n                <span className=\"mblock\">\r\n                    <p> &lt; span style=\"background-color:red\"&gt; &lt; /span &gt; </p>\r\n                    <span style={{ backgroundColor: 'red' }}> span태그의 예시 </span>\r\n                    <p> 인라인속성을 가지고 있어 글자만 빨간 것을 볼 수 있다.</p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"h태그\"> 5. h태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. block 속성 </p>\r\n                <p> 2. 글자 크기에 맞추어 폰트의 크기가 정해져 있음 </p>\r\n                <p> 3. 글자 크기가 정해져 있으므로 css스타일로 폰트크기를 바꾸는 것을 권장하지 않음 </p>\r\n                <p> 4. h1태그 부터 h6태그 까지 존재함 </p>\r\n                <span className=\"mblock\">\r\n                    <p> &lt; h1 style=\"background-color:red\"&gt; &lt; /h1 &gt; </p>\r\n                    <h1 style={{ backgroundColor: 'red' }}> h1태그의 예시 </h1>\r\n                    <p> &lt; h2 style=\"background-color:skyblue\"&gt; &lt; /h2 &gt; </p>\r\n                    <h2 style={{ backgroundColor: 'skyblue' }}> h2태그의 예시 </h2>\r\n                    <p> &lt; h3 style=\"background-color:red\"&gt; &lt; /h3 &gt; </p>\r\n                    <h3 style={{ backgroundColor: 'red' }}> h3태그의 예시 </h3>\r\n                    <p> &lt; h4 style=\"background-color:skyblue\"&gt; &lt; /h4 &gt; </p>\r\n                    <h4 style={{ backgroundColor: 'skyblue' }}> h4태그의 예시 </h4>\r\n                    <p> &lt; h5 style=\"background-color:red\"&gt; &lt; /h5 &gt; </p>\r\n                    <h5 style={{ backgroundColor: 'red' }}> h5태그의 예시 </h5>\r\n                    <p> &lt; h6 style=\"background-color:skyblue\"&gt; &lt; /h6 &gt; </p>\r\n                    <h6 style={{ backgroundColor: 'skyblue' }}> h6태그의 예시 </h6>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"p태그\"> 6. p태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. block 속성 </p>\r\n                <p> 2. 한 줄 띄어쓰기의 특성을 가짐 </p>\r\n                <p> 3. 문단 태그라고도 불리며 자주 사용되는 태그 </p>\r\n                <span className=\"mblock\">\r\n                    <p> &lt; span style=\"background-color:red\"&gt; &lt; /span &gt; </p>\r\n                    <p style={{ backgroundColor: 'red' }}> p태그의 예시 </p>\r\n                    <p> 인라인속성을 가지고 있어 글자만 빨간 것을 볼 수 있다.</p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"스타일 관련 태그\"> 7. 스타일 관련 태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. 인라인 속성 </p>\r\n                <p> 2. css스타일을 사용하지 않고도 사용됨 </p>\r\n                <p> 3. 솔직히 b, br태그 외에는 다른것은 가끔 사용하는것 같다</p>\r\n                <p> 4. css에서만 스타일을 적용해야 된다는 논쟁이 있는것으로 알고 있어서 저는 css에서만 스타일을 적용합니다</p>\r\n                <span className=\"mblock\">\r\n                    <b> b태그 : 굵은 글씨 </b> <br />\r\n                    <i> i태그 : 이탤릭체 </i> <br />\r\n                    <ins> ins태그 : 글씨아래 밑줄 </ins> <br />\r\n                    <del> del태그 : 중간에 줄</del> <br />\r\n                    <mark style={{ backgroundColor: 'skyblue' }}> mark태그 : 형광펜 </mark> <br />\r\n                    <sub> sub태그 : 아래 첨자</sub> <br />\r\n                    <sup> sup태그 : 위 첨자</sup> <br />\r\n                    <big> big태그 : 큰 글씨</big> <br />\r\n                    <small> small태그 : 작은 글씨</small> <br />\r\n                    br태그 : 띄어쓰기 태그(&lt;br/&gt;) 태그가 1개임 <br />\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"시멘틱 태그\"> 8. 시멘틱태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. block 속성 </p>\r\n                <p> 2. div태그와 동일하다 </p>\r\n                <p> 3. 사용하는 이유는 태그의 이름을 이용하여 시멘틱태그안에는 정해진 내용을 넣겠다라는 의미이다 </p>\r\n                <p> header : 상단 구역 </p>\r\n                <p> nav : 상단 구역에 메뉴 </p>\r\n                <p> aside : 사이드 영역 </p>\r\n                <p> section : 메인 영역 </p>\r\n                <p> article : 신문,기사,글 영역 </p>\r\n                <p> footer : 하단 구역, 저작권, 회사명, 주소, SNS 등등 </p>\r\n                <p> 시멘틱 태그가 몇개 더 있는것으로 기억하지만 일단 기억나는대로만 작성하였다. </p>\r\n\r\n                <span className=\"mblock\">\r\n                    <header style={{ backgroundColor: 'red' }}> header태그의 예시 </header>\r\n                    <nav style={{ backgroundColor: 'skyblue' }}> nav태그의 예시 </nav>\r\n                    <aside style={{ backgroundColor: 'red' }}> aside태그의 예시 </aside>\r\n                    <section style={{ backgroundColor: 'skyblue' }}> section태그의 예시 </section>\r\n                    <article style={{ backgroundColor: 'red' }}> article태그의 예시 </article>\r\n                    <footer style={{ backgroundColor: 'skyblue' }}> footer태그의 예시 </footer>\r\n                    <footer> 시멘틱 태그는 div태그이지만 이름만 다른 태그인 것을 알 수 있다. </footer>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"a태그\"> 9. a태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. inline 속성 </p>\r\n                <p> 2. 주소로 이동시켜는 태그 </p>\r\n                <p> 3. href속성이 있으면 클릭이 된다 </p>\r\n                <span className=\"mblock\">\r\n                    <p> &lt; a href=\"#\" &gt; a태그의 예시1 &lt; /a &gt; </p>\r\n                    <a href=\"#\"> href=\"#\" 은 글씨는 클릭되지만 </a>\r\n                    <p> &lt; a href=\"#\" style=\"text-decoration=none\"&gt; a태그의 예시2 &lt; /a &gt; </p>\r\n                    <a href=\"#\" style={{ textDecoration: 'none' }}> text-decoration 속성은 밑줄을 없애준다 </a>\r\n                    <p> &lt; a href=\"https://www.naver.com/\" &gt; a태그의 예시3 &lt; /a &gt; </p>\r\n                    <a href=\"https://www.naver.com/\" > 네이버 주소로 이동 </a>\r\n                    <p> &lt; a href=\"https://www.naver.com/\" target=\"_blank\" &gt; a태그의 예시4 &lt; /a &gt; </p>\r\n                    <a href=\"https://www.naver.com/\" target=\"_blank\" > 새탭을 이용하여 네이버 주소로 이동 </a>\r\n                    <span className=\"sblock\">\r\n                        <p> 홈페이지에 보면 맨 위로 이동할 때 아래와 같이 사용한다. 만약에 아래와 같이 작성을하고 버튼을 눌렀는데\r\n                            이동하지 않았다면 2개의 태그가 너무 가까워서 움직이지 않은 것처럼 보였을 것이다.\r\n                            그러므로 저 위로 이동하여 놓고 해보면 작동할 것이다.\r\n                            그리고 반드시 a태그를 이용하여야만 작동이 된다.\r\n                        </p>\r\n                        <p> &lt; a name=\"top\" &gt; a태그의 예시5 목적지 주소&lt; /a &gt; </p>\r\n                        <a name=\"top\"> 내부 a태그 주소(하이퍼링크)로 이동 </a>\r\n                        <p> &lt; a href=\"#top\" &gt; a태그의 예시5 이동할 주소&lt; /a &gt; </p>\r\n                        <a href=\"#top\"> 내부 a태그 주소(하이퍼링크)로 이동 </a>\r\n                    </span>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"link태그\"> 10. link태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. 비어있는 태그 </p>\r\n                <p> 2. 속성만 넣을 수 있음  </p>\r\n                <p> 3. 외부 소스를 불러주는 태그 </p>\r\n                <p> 4. HTML에서 css파일을 불러서 사용할 떄 일반적으로 사용 </p>\r\n                <span className=\"mblock\">\r\n                    <p> link태그는 &lt;head&gt; HTML head태그 안에 넣는다 &lt;/head&gt;</p>\r\n                    <p> 아래 코드는 style.css 이름을 가진 css 파일을 불러오는 방법</p>\r\n                    <p> &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"&gt;</p>\r\n                    <p> rel: 필수 속성으로, 현재 문서에 어떤 리소스 인지 알려준다 </p>\r\n                    <p> type: 외부 리소스의 미디어 타입 </p>\r\n                    <p> href: 외부 리소스의 URL </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"img태그\"> 11. img태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. 이미지 태그 </p>\r\n                <p> 2. src 속성 : 이미지의 주소입력 , null값이면 에러발생  </p>\r\n                <p> 3. alt 속성 : 이미지의 설명 </p>\r\n                <span className=\"mblock\">\r\n                    <p> img태그는 &lt;img src=\"URL주소\" alt=\"이미지설명\" width=\"100px\" &gt; </p>\r\n                    <img src={process.env.PUBLIC_URL + '/img/mountain_and_sea.jpg'} alt=\"산과바다\" width=\"100px\" />\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"input태그\"> 12. input태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. 사용자가 입력을 할 수 있는 태그 </p>\r\n                <p> 2. 아이디,회원가입 등에서 사용하는 태그로 form태그와 같이 사용된다.  </p>\r\n                <p> 3. input태그는 type속성을 이용하여 여러가지의 데이터를 입력할 수 있다. </p>\r\n                <p> 4. input태그의 대표적 속성 required, placeholder </p>\r\n                <p> required 속성을 사용한 input태그는 제출시 제출이 불가능 </p>\r\n                <p> placeholder 속성을 사용하면 무엇을 입력할지 설명을 넣을 수 있다. </p>\r\n                <span className=\"mblock\">\r\n                    <p> input태그의 예시 </p>\r\n                    <p> &lt;form&gt; method=\"GET\" action=\"#\"&gt;</p>\r\n                    <p> &lt;p&gt; &lt;input type=\"text\" placeholder=\"아이디를 입력해주세요\" required /&gt; &lt;/p&gt;</p>\r\n                    <p> &lt;p&gt; &lt;input type=\"password\" placeholder=\"비밀번호를 입력해주세요\" required /&gt; &lt;/p&gt;</p>\r\n                    <p> &lt;p&gt; &lt;button&gt; type=\"submit\"&gt; 제출 &lt;/button&gt;  &lt;/p&gt;</p>\r\n                    <p> &lt;/form&gt;</p>\r\n                    <form method=\"GET\" action=\"#\">\r\n                        <p> <input type=\"text\" placeholder=\"아이디를 입력해주세요\" required /> </p>\r\n                        <p> <input type=\"password\" placeholder=\"비밀번호를 입력해주세요\" required /> </p>\r\n                        <p> <button type=\"submit\"> 제출 </button>  </p>\r\n                    </form>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"form태그\"> 13. form태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. 프론트엔드에서 사용자가 입력을 하고 백엔드 서버에 데이터를 보낼 때 사용  </p>\r\n                <p> 2. form으로 보내는 방식에는 get,post 방식 등이 있다. </p>\r\n                <p> 3. form태그 안에 여러가지 input 태그가 존재한다. </p>\r\n                <p> 4. form태그 자체로는 아무런 특성이 없다. </p>\r\n                <p> 5. input태그에서 자주 사용되는 속성</p>\r\n                <span className=\"mblock\">\r\n                    <p> form태그 </p>\r\n                    <p> GET방식은 빠르지만 보안이 좋지 않아 사생활 정보가 필요없을 때 사용, 검색 등</p>\r\n                    <p> POST방식은 상대적으로 느리지만 보안이 좋아 사생활 정보가 필요할 때, 로그인,회원가입 등 </p>\r\n                    <p> &lt; form method=\"POST\"혹은\"GET\" action=\"양식을보낼주소\" &gt; 이곳에 input태그들을 작성한다 &lt; /form &gt;</p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> fieldset태그 </p>\r\n                    <p> form태그와 같이 사용할 수 있는 태그</p>\r\n                    <p> form태그의 범위를 볼 수 있고 테두리를 감싸 줌 </p>\r\n                    <p> &lt;form&gt;  &lt;fieldset&gt; 123123 &lt;/fieldset&gt; &lt;/form&gt; </p>\r\n                    <p> <form>  <fieldset> 123123 </fieldset> </form> </p>\r\n                </span>\r\n                <h2> form에서 사용하는 input 태그의 종류 </h2>\r\n                <span className=\"mblock\">\r\n                    <p> 1. 숫자만 입력</p>\r\n                    <p> &lt;input type=\"number\"/&gt;</p>\r\n                    <p> <input type=\"number\" /> </p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> 2. 텍스트 입력시 * 처리, 비밀번호를 입력할 때 사용</p>\r\n                    <p> &lt;input type=\"password\"/&gt;</p>\r\n                    <p> <input type=\"password\" /> </p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> 3. 라디오 버튼 , 여러개의 선택지 중에서 한 개를 선택할 때 사용</p>\r\n                    <p> &lt;input type=\"radio\" name=\"gender\" value=\"man\"/&gt; </p>\r\n                    <p> &lt;input type=\"radio\" name=\"gender\" value=\"woman\"/&gt; </p>\r\n                    <p> <input type=\"radio\" name=\"gender\" value=\"man\" /> 남 </p>\r\n                    <p> <input type=\"radio\" name=\"gender\" value=\"woman\" /> 녀 </p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> 4. 체크박스, 여러개의 선택지 중에서 여러개 를 선택할 때 사용 </p>\r\n                    <p> &lt;input type=\"checkbox\" name=\"hooby\" value=\"music\"/&gt; 음악</p>\r\n                    <p> &lt;input type=\"checkbox\" name=\"hooby\" value=\"sport\" /&gt; 운동 </p>\r\n                    <p> &lt;input type=\"checkbox\" name=\"hooby\" value=\"game\"/&gt; 게임 </p>\r\n                    <p> 좋아하는 취미를 고르세요 </p>\r\n                    <p> <input type=\"checkbox\" name=\"hooby\" value=\"music\" /> 음악 </p>\r\n                    <p> <input type=\"checkbox\" name=\"hooby\" value=\"sport\" /> 운동</p>\r\n                    <p> <input type=\"checkbox\" name=\"hooby\" value=\"game\" /> 게임</p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> <a name=\"label태그\"> 13.1 label태그 </a> </p>\r\n                    <p> 체크박스나 라디오 버튼을 사용할 떄 자주 사용되는 태그 </p>\r\n                    <p> 체크박스를 클릭하지 않아도 글자를 클릭하면 클릭할 수 있다. </p>\r\n                    <p> 체크박스를 안보이게 하고 라벨 글자만 클릭하여 css 애니메이션을 만들기도 한다 </p>\r\n                    <p> label태그의 for=\"\" 하고 input태그의 id=\"\" 값하고 연결된다 </p>\r\n                    <p> &lt; label for=\"music\" &gt; 음악 클릭 &lt; /label &gt;  </p>\r\n                    <p> &lt; input type=\"checkbox\" id=\"music\" &gt; &lt;/input &gt;  </p>\r\n                    <p> <label htmlFor=\"music\"> <mark> 음악 클릭 </mark> </label> </p>\r\n                    <p> <input type=\"checkbox\" id=\"music\" ></input>  </p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> 5. 텍스트 , 텍스트를 입력할 때 </p>\r\n                    <p> placeholder는 흐릿하게 무엇을 적을지 보여주는 값이다. 입력되면 사라진다. </p>\r\n                    <p> &lt;input type=\"text\" name=\"text\" placeholder=\"텍스트를 입력하세요\"/&gt; </p>\r\n                    <p> <input type=\"text\" name=\"text\" placeholder=\"텍스트를 입력하세요\" />  </p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> 6. 텍스트 영역 , 블로그나 문의사항 메일 등 긴 장문의 텍스트를 입력할 때 사용</p>\r\n                    <p> 속성 설명 : cols(가로길이) , rows(세로줄) , resize(크기조절) , border(테두리) , overflow(글자가넘칠때) </p>\r\n                    <p> &lt;textarea cols=\"20\" rows=\"5\" style=\"resize:none; border:none; overflow:auto\"/&gt; </p>\r\n                    <p> <textarea cols=\"20\" rows=\"5\" style={{ resize: 'none', border: 'none', overflow: 'auto' }} />  </p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> 7. 선택목록 , 여러개의 조건 중에 선택을 할 수 있음</p>\r\n                    <p> 속성 설명 : selected(처음 선택되어 있는 옵션) , disabled(옵션으로 선택 불가능)</p>\r\n                    <p> &lt;select name=\"area\"&gt; </p>\r\n                    <p> &nbsp;&nbsp;&lt;option value=\"\" selected disabled&gt; &lt;/option&gt; </p>\r\n                    <p> &nbsp;&nbsp;&lt;option value=\"서울\"&gt; 서울 &lt;/option&gt; </p>\r\n                    <p> &nbsp;&nbsp;&lt;option value=\"부산\"&gt; 부산 &lt;/option&gt; </p>\r\n                    <p> &nbsp;&nbsp;&lt;option value=\"경기\"&gt; 경기 &lt;/option&gt; </p>\r\n                    <p> &nbsp;&lt;optgroup label=\"한국\"&gt; </p>\r\n                    <p> &nbsp;&nbsp;&lt;option value=\"대구\"&gt; 대구 &lt;/option&gt; </p>\r\n                    <p> &nbsp;&nbsp;&lt;option value=\"대전\"&gt; 대전 &lt;/option&gt; </p>\r\n                    <p> &nbsp;&lt;/optgroup&gt; </p>\r\n                    <p> &lt;/select&gt; </p>\r\n                    <select name=\"area\">\r\n                        <option value=\"\" selected disabled> 선택 </option>\r\n                        <option value=\"서울\"> 서울 </option>\r\n                        <option value=\"부산\"> 부산 </option>\r\n                        <option value=\"경기\"> 경기 </option>\r\n                        <optgroup label=\"한국\">\r\n                            <option value=\"대구\"> 대구 </option>\r\n                            <option value=\"대전\"> 대전 </option>\r\n                        </optgroup>\r\n                    </select>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> 8. 제출 , form 태그에 작성된 양식을 action으로 보낼 때 사용</p>\r\n                    <p> 각 input태그에 name속성과 value속성을 이용하여 백엔드 서버로 보냄 </p>\r\n                    <p> 백엔드 서버에서는 name이라는 값을 참조하여 value값을 사용할 수 있음 </p>\r\n                    <p> 예를들어 어떤 input태그에 name=\"gender\" value=\"man\" 이라고 한다면\r\n                        백엔드에서 String sex = request.getParameter(\"gender\"); //sex = man으로 사용됨\r\n                    </p>\r\n                    <p> &lt;button type=\"submit\"&gt; 제출 &lt;/button&gt; </p>\r\n                    <p> <button type=\"submit\">  제출  </button> </p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> 9. 기타 등등 나중에 시간나면 추가로 적을 계획 </p>\r\n                    <p> range(좌우스크롤바), reset(초기화), search(검색창),\r\n                        tel(전화번호), time(시간), week(날짜), datetime(날짜?),\r\n                        email(이메일양식), month(달력) </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"list태그\"> 14.list태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. 리스트 형식으로 나열될 때 사용  </p>\r\n                <p> 2. 실제로는 세로로 나열보다는 css를 이용하여 가로로 배열하는데 사용하는것 같다. </p>\r\n                <p> 3. 리스트 태그에는 순서가 있는(ul)태그와 순서가 없는(ol)태그가 있다. </p>\r\n                <p> 그냥 ul만 써도 충분한것 같다. </p>\r\n                <p> 4. 리스트태그는 왼쪽에 원판(disc) 원(circle) 등 list-style-type 속성을 가지고있다. </p>\r\n                <p> 왠만하면 그냥 list-style-type=\"none\" 으로 사용할 것 같다. </p>\r\n                <span className=\"mblock\">\r\n                    <p> &lt; ul &gt; </p>\r\n                    <p> &nbsp;&nbsp;&lt; li &gt; 첫번째 &lt; /li &gt; </p>\r\n                    <p> &nbsp;&nbsp;&lt; li &gt; 두번째 &lt; /li &gt; </p>\r\n                    <p> &lt; /ul &gt; </p>\r\n                    <p>\r\n                        <ul>\r\n                            <li style={{ marginLeft: \"20px\" }}>첫번째</li>\r\n                            <li style={{ marginLeft: \"20px\" }}>두번째</li>\r\n                        </ul>\r\n                    </p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> &lt; ol &gt; </p>\r\n                    <p> &nbsp;&nbsp;&lt; li &gt; 첫번째 &lt; /li &gt; </p>\r\n                    <p> &nbsp;&nbsp;&lt; li &gt; 두번째 &lt; /li &gt; </p>\r\n                    <p> &lt; /ol &gt; </p>\r\n                    <p>\r\n                        <ol>\r\n                            <li style={{ marginLeft: \"20px\" }}>첫번째</li>\r\n                            <li style={{ marginLeft: \"20px\" }}>두번째</li>\r\n                        </ol>\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"table태그\"> 15.table태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 표를 만들 때 사용하는 태그 </p>\r\n                <p> 알고 있어야 되는 개념이지만 자주 사용되지 않아 그냥 기억만 하고 있다. </p>\r\n                <p> 테이블과 관련된 태그의 종류 및 속성 , 많지만 필요한것만 정리</p>\r\n                <span className=\"mblock\">\r\n                    <p> table(표) (th(표의제목) tr(가로줄) td(셸,한칸))\r\n                        (colgroup col)(표의 길이나 색상등을 지정할 수 있음)\r\n                        thead(테이블상단구역) tbody(테이블중간구역) tfoot(테이블하단구역)\r\n                    </p>\r\n                    <p>\r\n                        colspan=\"2\"(셸의 가로줄을 합치는 갯수), rowspan=\"2\"(셸의 세로줄을 합치는갯수)\r\n                    </p>\r\n                </span>\r\n                <p> 테이블 태그의 예시 </p>\r\n                <span className=\"mblock\">\r\n                    <p>\r\n                        <p> &lt;table border=\"1\"&gt; </p>\r\n                        <p> &nbsp;&lt;colgroup&gt; </p>\r\n                        <p> &nbsp;&nbsp;&lt;col width=\"50px\" style=\"background:red\"/&gt; </p>\r\n                        <p> &nbsp;&nbsp;&lt;col width=\"150px\" style=\"background:green\" /&gt;</p>\r\n                        <p> &nbsp;&lt;col width=\"250px\" style=\"background:blue\" /&gt;</p>\r\n                        <p> &nbsp;&lt;/colgroup&gt;</p>\r\n                        <p> &nbsp;&lt;thead&gt;</p>\r\n                        <p> &nbsp;&nbsp;&lt;tr&gt;</p>\r\n                        <p> &nbsp;&nbsp;&nbsp;&lt;th colSpan=\"2\"&gt; 제목 &lt;/th&gt; </p>\r\n                        <p> &nbsp;&nbsp;&nbsp;&lt;th rowSpan=\"3\"&gt; 번호번호번호 &lt;/th&gt; </p>\r\n                        <p> &nbsp;&lt;/tr&gt;</p>\r\n                        <p> &nbsp;&lt;/thead&gt;</p>\r\n                        <p> &nbsp; &lt;tbody&gt;</p>\r\n                        <p> &nbsp;&nbsp; &lt;tr&gt;</p>\r\n                        <p> &nbsp;&nbsp;&nbsp; &lt;td&gt; 1번 &lt;/td&gt;</p>\r\n                        <p> &nbsp;&nbsp;&nbsp; &lt;td&gt; 1 &lt;/td&gt;</p>\r\n                        <p> &nbsp;&nbsp;&nbsp; &lt;td&gt; 1 &lt;/td&gt;</p>\r\n                        <p> &nbsp;&nbsp;&lt;/tr&gt;</p>\r\n                        <p> &nbsp; &lt;/tbody&gt;</p>\r\n                        <p> &nbsp;&lt;tfoot&gt;</p>\r\n                        <p> &nbsp;&nbsp; &lt;tr&gt;</p>\r\n                        <p> &nbsp;&nbsp;&nbsp;  &lt;td&gt; 2번 &lt;/td&gt;</p>\r\n                        <p> &nbsp;&nbsp;&nbsp; &lt;td&gt; 2 &lt;/td&gt;</p>\r\n                        <p> &nbsp;&nbsp;&nbsp; &lt;td&gt; 2 &lt;/td&gt;</p>\r\n                        <p> &nbsp;&nbsp; &lt;/tr&gt;</p>\r\n                        <p> &nbsp; &lt;/tfoot&gt;</p>\r\n                        <p> &lt;/table&gt;</p>\r\n                    </p>\r\n\r\n                    <table border=\"1\">\r\n                        <colgroup>\r\n                            <col width=\"50px\" style={{ background: \"red\" }} />\r\n                            <col width=\"150px\" style={{ background: \"green\" }} />\r\n                            <col width=\"250px\" style={{ background: \"blue\" }} />\r\n                        </colgroup>\r\n                        <thead>\r\n                            <tr>\r\n                                <th colSpan=\"2\"> 제목 </th>\r\n                                <th rowSpan=\"3\"> 번호번호번호 </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td> 1번 </td>\r\n                                <td> 1 </td>\r\n                                <td> 1 </td>\r\n                            </tr>\r\n                        </tbody>\r\n                        <tfoot>\r\n                            <tr>\r\n                                <td> 2번 </td>\r\n                                <td> 2 </td>\r\n                                <td> 2 </td>\r\n                            </tr>\r\n                        </tfoot>\r\n                    </table>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"detail태그\"> 16. detail태그 </a></span>\r\n                <p> 특징 : </p>\r\n                <p> 1. bloack속성 </p>\r\n                <p> 2. 메뉴를 펼치고 접는 것을 하는 태그 </p>\r\n                <p> <i> 속성 </i></p>\r\n                <p> 1. oepn : html에서는 펼쳐진 상태로 , css에서는 펼쳐졌을때 details[open]</p>\r\n                <span className=\"mblock\">\r\n                    <p> &lt; details &gt; </p>\r\n                    <p> &nbsp;&nbsp;&lt; summary &gt; </p>\r\n                    <p> &nbsp;&nbsp;안에 내용적고 details를 써서 여러번 사용 가능</p>\r\n                    <p> &nbsp;&nbsp;&lt; /summary &gt; </p>\r\n                    <p> &lt; /details &gt; </p>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HtmlBasic;","import React from 'react';\r\n\r\nconst CssBasic = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. (하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#\"> </a>\r\n                        {/* <a href=\"#\"> </a> */}\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"sblock\">\r\n                    </span>\r\n                </span>\r\n            </span>\r\n            {/* <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"sblock\">\r\n                    </span>\r\n                </span>\r\n            </span> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CssBasic;","import React from 'react';\r\n\r\nconst JspServletInformation = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"lblocknav_container\">\r\n                <span className=\"lblocknav\">\r\n                    <span className=\"mtitle\"> 0. 서블릿과 JSP(하이퍼링크) </span>\r\n                    <span className=\"mblock\">\r\n                        <p className=\"hyperlink\">\r\n                            <a href=\"#Servlet이란\">1. Servlet이란</a>\r\n                            <a href=\"#Servlet Lifecycle\">2. Servlet Lifecycle</a>\r\n                            <a href=\"#Servlet 장점\">3. Servlet 장점</a>\r\n                            <a href=\"#JSP란\">4. JSP란</a>\r\n                            <a href=\"#JSP변환과정\">5. JSP변환과정</a>\r\n                            <a href=\"#서블릿컨테이너의역할\">6. 서블릿컨테이너의역할</a>\r\n                        </p>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n            <div className=\"common_style\">\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"Servlet이란\"> 1. Servlet이란</a> </span>\r\n                    <p> 서블릿은 자바언어를 사용하여 클라이언트의 요청을 동적으로 처리하는 자바 클래스입니다. </p>\r\n                    <p> 현재는 클라이언트의 요청을 받아 어떤 작업을 해야할지 관리해주는 Controller의 역할을 한다</p>\r\n                    <p> CGI(Common GateWay Interface) 웹서버와 프로그램사이에서 주고 받는 방법, 구현된 언어와 체계가 다르기\r\n                        때문에 맞추어주는 하나의 규약 , Servlet은 자바에서 사용되는 CGI이다 </p>\r\n                    <p> 기존에 CGI는 멀티프로세스 방식으로 다수의 요청처리에 부하가 심하지만 Servlet은 멀티쓰레드\r\n                        방식으로 부하가 덜하다.\r\n                    </p>\r\n                    <span className=\"mblock\">\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/Servlet.png'} /> </p>\r\n                    </span>\r\n                </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"Servlet Lifecycle\"> 2. Servlet Lifecycle</a> </span>\r\n                    <p> 클라이언트가 요청을 하게 되면 서블릿의 생성에서 소멸되기 까지의 과정이다. </p>\r\n                    <p> Init() , Service() , Destroy()  3가지의 메서드로 구성된다. </p>\r\n                    <p> Init() : Servlet객체가 처음 생성될 때 실행된다 </p>\r\n                    <p> Service() : 클라이언트가 Servlet을 요청할 때 마다 실행된다 </p>\r\n                    <p> Destroy() : 서블릿객체가 소멸될 떄는 더이상 사용하지 않을 떄라고 되어있는데\r\n                        서버가 종료되거나 기존에 있던 서블릿객체의 내용이 새로 갱신되었을 경우 </p>\r\n                    <span className=\"mblock\">\r\n                        <p> 1. 클라이언트 요청 </p>\r\n                        <p> 2. 웹 컨테이너에서 클라이언트가 요청한 서블릿 객체가 있는지 확인 </p>\r\n                        <p> 3. 없으면 서블릿 객체를 생성</p>\r\n                        <p> 4. 서블릿 객체에 service()메소드를 실행 , 일반적으로 사용할 때는 HttpServlet클래스를\r\n                            상속받기 떄문에 요청된 방식에 따라 doGet(), doPost() 메소드로 사용한다\r\n                        </p>\r\n                        <p> 5. 그 다음 DAO,DB,JSP 등 다른 과정을 거치고 사용자에게 응답한다.</p>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/Servlet_Lifecycle.png'} /> </p>\r\n                    </span>\r\n                </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"Servlet 장점\"> 3. Servlet 장점 </a> </span>\r\n                    <p> 1. 자바기반으로 Java API를 사용이 가능하다 </p>\r\n                    <p> 2. 쓰레드를 이용하기 떄문에 클라이언트의 요청에 대해 자원을 효율적으로 사용가능한다 </p>\r\n                    <p> 다수의 클라이언트가 요청하면 서블릿 객체를 여러개를 만드는 것이 아니라 한개의 서블릿 객체만을 만들고\r\n                        쓰레드를 이용하여 객체가 접근하므로 효율적으로 작동이 가능하다 </p>\r\n                    <p> 3. 비즈니스 로직(서비스) 과 프레젠테이션(클라이언트가 보는 화면)의 분리가 가능하다 </p>\r\n                    <p> 4. 업무분담이 좋아지고 , 유지보수가 수월하며 , 기능확장도 좋다  </p>\r\n                    <p> 단점 : 서블릿에는 HTML 코드가 섞여있어 불편함 -&gt; JSP로 어느정도 해결</p>\r\n                    <span className=\"mblock\">\r\n                        <p>  </p>\r\n                    </span>\r\n                </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"JSP란\"> 4. JSP란 </a> </span>\r\n                    <p> Java Servet Page로 자바환경에서 HTML을 처리  </p>\r\n                    <p> JSP파일은 Servlet파일로 변환이 되어서 사용  </p>\r\n                    <p> 과거의 서블릿은 HTML + Java 혼합, 보기도 불편하고,\r\n                        로직도 작성하기 힘들고,\r\n                        HTML코드 때문에 매번 컴파일 과정을 거쳐야함</p>\r\n                    <p> HTML(프레젠테이션 로직,사용자가보는화면)은 JSP가 처리</p>\r\n                    <p> Java(비즈니스 로직, 서비스처리 과정)은 Servlet가 처리</p>\r\n                    <span className=\"mblock\">\r\n                        <p>  </p>\r\n                    </span>\r\n                </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"JSP변환과정\"> 5. JSP변환과정 </a> </span>\r\n                    <p> 1. 웹 컨이너가 Servlet객체가 있는지 판단(변환된 JSP객체) </p>\r\n                    <p> 2. Jsp를 Java소스파일로 변환 </p>\r\n                    <p> 3. Java소스파일을 컴파일 하여 Servlet클래스로 변환 </p>\r\n                    <p> 4. Servlet클래스를 사용 </p>\r\n                    <span className=\"mblock\">\r\n                        <p> JSP 또한 서블릿이므로 LifeCycle을 가진다</p>\r\n                        <p> JSP의 장점으로 JSP의 파일 내부의 값이 자동으로 변환이 된다 </p>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/JSP_Lifecycle.png'} /> </p>\r\n                    </span>\r\n                </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"서블릿컨테이너의역할\"> 6. 서블릿컨테이너의역할 </a> </span>\r\n                    <p> 서블릿 컨테이너의 역할 </p>\r\n                    <p> 1. 서블릿 생명주기 관리</p>\r\n                    <p> 2. 웹 서버와의 통신 지원</p>\r\n                    <p> 3. 멀티쓰레드 지원 및 관리</p>\r\n                    <p> 4. xml 파일 등 관리 </p>\r\n                    <span className=\"mblock\">\r\n                        <p> 클라이언트가 요청할 때 서블릿컨테이너가 하는 역할</p>\r\n                        <p> 아래의 순서는 약간 차이가 있을 수 있지만 과정은 아래와 같습니다</p>\r\n                        <p> 1. HttpServletRequest객체, HttpServletResponse객체 생성</p>\r\n                        <p> 2. 쓰레드 생성 </p>\r\n                        <p> 3. 생성된 객체를 쓰레드에게 전달</p>\r\n                        <p> 4. xml 파일을 참조하여 URL을 분석하고 어느 서블릿을 요청할지 찾음</p>\r\n                        <p> 5. 사용자가 요청한 서블릿 호출</p>\r\n                        <p> 6. 쓰레드가 서블릿에서 doGet(),doPost() 실행시켜 동적페이지를 Response()객체에 보관</p>\r\n                        <p> 7. Responser() 객체를 HttpResponse()형태로 전환하고 쓰레드와 응답,요청 객체 소멸</p>\r\n                        <p> 8. 클라이언트 응답을 보냄( WAS -&gt; 웹서버로 이동 )</p>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/ServletContainer.png'} /> </p>\r\n                    </span>\r\n                </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"JSP변환과정\"> 7. Servlet사용하기 </a> </span>\r\n                    <p> 1. 웹 컨이너가 Servlet객체가 있는지 판단(변환된 JSP객체) </p>\r\n                    <p> 2. Jsp를 Java소스파일로 변환 </p>\r\n                    <p> 3. Java소스파일을 컴파일 하여 Servlet클래스로 변환 </p>\r\n                    <p> 4. Servlet클래스를 사용 </p>\r\n                    <span className=\"mblock\">\r\n                        <p> JSP 또한 서블릿이므로 LifeCycle을 가진다</p>\r\n                        <p> JSP의 장점으로 JSP의 파일 내부의 값이 자동으로 변환이 된다 </p>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/JSP_Lifecycle.png'} /> </p>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default JspServletInformation;","import React from 'react';\r\n\r\nconst JavaBasic = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. 자바 문법(하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#Optional\">Optional</a>\r\n                        <a href=\"#Stream\">Stream</a>\r\n                        <a href=\"#함수의 종류\">함수의 종류</a>\r\n                        <a href=\"#Assertion\">Assertion</a>\r\n                        <a href=\"#자료구조 map\">자료구조 map</a>\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            {/* <p> <a href=\"https://dev.w3.org/html5/html-author/charref\" target=\"_blank\"> Entity Code </a> </p> */}\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"Optional\"> Optional </a> </span>\r\n                <p> <a href=\"https://jdm.kr/blog/234\"> 참고 </a></p>\r\n                <p> java.util.Optional{\"<T>\"} 클래스 : T타입의 객체를 포장해주는 래퍼 클래스 </p>\r\n                <span className=\"mblock\">\r\n                    <span className=\"mblock\">\r\n                        <p> <i> {\" opt.isEmpty() \"} </i> : 값이 존재하는지 boolean값 리턴 </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <p> <i> {\" opt.orElseGet() \"} </i> : 저장된 값이 존재하면 값을 반환 값이 없으면 인수로 전달된\r\n                            람다 표현식 결과값 반환 </p>\r\n                    </span>\r\n                    <p> 시작 처리 : 옵셔널 객체 생성 메소드 </p>\r\n                    <span className=\"mblock\">\r\n                        <p> <i> {\"Optional.of()\"} </i> : 저장된 값이 존재하면 입력된 값을 반환 없으면\r\n                            인수로 전달된 예외를 발생 </p>\r\n                        <p>  Optional&lt;String&gt; opt = Optional.of(\"result\"); </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <p> <i> {\"Optional.ofNullable()\"} </i> : value가 null인 경우 Optional 반환</p>\r\n                        <p> Optional&lt;String&gt; opt = Optional.ofNullable(객체); </p>\r\n                        <p> 객체가 존재하지 않으면 return Optional.empty + 에러발생</p>\r\n                        <p> 객체가 존재하면 return Optional객체 </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <p> <i> {\"Optional.empty()\"} </i> : 비어있는 Optional 객체 생성, Optional을 null로 초기화하기도 함 </p>\r\n                        <p> Optional&lt;String&gt; opt = Optional.empty(); </p>\r\n                    </span>\r\n                    <p> 중간 처리 , 옵셔널 객체가 생성된 후 사용가능, 아래 메서드는 옵셔널 객체를 반환 </p>\r\n                    <span className=\"mblock\">\r\n                        <p> <i> {\" opt.ifPresent() \"} </i> : </p>\r\n                        <p> Optional.of(\"객체\").ifPresent((value) {\"->\"} {\"{\"} {\"}\"} );</p>\r\n                        <p> Optional.ofNullable(null).ifPresent((value) {\"->\"} {\"{\"} {\"}\"} );</p>\r\n                    </span>\r\n                    <p> 종단 처리 , 옵셔널 객체의 체이닝을 끝냄 </p>\r\n                    <span className=\"mblock\">\r\n                        <p> <i> {\" opt.ifPresent() \"} </i> : </p>\r\n                        <p> Optional.of(\"객체\").ifPresent((value) {\"->\"} {\"{\"} {\"}\"} );</p>\r\n                        <p> Optional.ofNullable(null).ifPresent((value) {\"->\"} {\"{\"} {\"}\"} );</p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <p> <i> {\" opt.isPresent() \"} </i> : 객체가 존재하는지 여부 판단, 있으면 true </p>\r\n                        <p>  {\" Optional.ofNullable(객체).isPresent(); \"} : 객체가 존재하는지 여부 판단, 있으면 true </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <p> <i> {\" opt.get() \"} </i> : 객체를 꺼냄, 비어있는 옵셔널 객체면 예외 발생 </p>\r\n                        <p>  {\" Optional.ofNullable(null).get(); \"}  </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <p> <i> {\" opt.orElse() \"} </i> : 옵셔널 객체가 비어있든,아니든 실행 기본값으로 제공할 객체를 지정 </p>\r\n                        <p>  {\" Optional.ofNullable(null).orElse(객체);\"} </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <p> <i> {\" opt.orElseGet() \"} </i> : 옵셔널 객체가 비어있을때만 실행 , 기본갑으로 제공할 공급자함수 지정 </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <p> <i> {\" opt.orElseThrow() \"} </i> : (자바10)옵셔널 객체가 비어있으면 , 예외 공급자함수를 통해 예외 발생 </p>\r\n                    </span>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"Stream\"> Stream </a> </span>\r\n                <p> 스트림은 배열 또는 컬렉션 인스턴스를 이용해서 사용 가능</p>\r\n                <span className=\"mblock\">\r\n                    <p> 배열 스트림</p>\r\n                    <p> {\"Stream<String> stream = Arrays.stream(arr)\"} </p>\r\n                    <p> {\"Stream<String> streamOfArrayPart = Arrays.stream(arr,1,3)\"} </p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> 컬렉션 스트림</p>\r\n                    <p> {\"public interface Collection<E> extends Iterable<E>\"} </p>\r\n                    <p> {\"default Stream<E> stream() \"} </p>\r\n                    <p> {\" return StreamSupport.strea(spliterator(),false);\"} </p>\r\n                    <p> {\" \"}</p>\r\n                    <p> {\" Stream<String> stream = list.stream(); \"}</p>\r\n                    <p> {\" Stream<String> parallelStream = list.parallelStream(); \"}</p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"함수의 종류\"> 함수의 종류</a> </span>\r\n                <p> <a href=\"https://moreget.github.io/dev-00000061-Java-Consumer_Supplier/\" target=\"_blank\"> 참고 사이트 </a> </p>\r\n                <p> Consumer : 매개값은 있고 리턴값은 없음 </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n                <p> Supplier : 매개값은 없고, 리턴값은 있음</p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n                <p> Function : 매개값을 (주로)리턴값으로 반환 </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n                <p> Operator : 매개값으로 연산하고 리턴 반환</p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n                <p> Predicate : 매개값은 있고 리턴은 boolean반환 </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"Assertion\"> Assertion </a> </span>\r\n                <p> 코드가 잘 작성되었는지 확인하는데 돕는 기능이다. 예외 처리와 비슷하기는\r\n                    하지만 예외처리는 개발자가 생각하지 못한 에러에 대한 처리를 담당하는 것이다.\r\n                </p>\r\n                <p> Assertion은 개발자가 정한 조건을 만족시키면 코드가 실행되고 그 외에는 실행되지\r\n                    못하게 하는 차이가 있다.\r\n                </p>\r\n                <p> Assertion을 적당한 위치에 배치시켜 사용하면 좋은 동작을 수행할 수 있다. 반대로\r\n                    모든 상황에 적용시키면 좋지 않다.\r\n                </p>\r\n                <span className=\"mblock\">\r\n                    <p> </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"자료구조 map\"> 자료구조 map </a> </span>\r\n                <p> {\"Map<자료형,자료형> Map객체명 = new HashMap<>(); \"}</p>\r\n                <p> 메서드 종류 </p>\r\n                <p> <i> Map객체.put(키,값) </i> : 맵객체에 추가 </p>\r\n                <p> <i> Map객체.keys() </i> : 객체의 키만 담은 배열 반환 </p>\r\n                <p> <i> Map객체.values() </i> : 객체의 값만 담은 배열 반환 </p>\r\n                <p> {\"Collection<String> values = map.values();\"}</p>\r\n                <p> {\"String[] arr = values.toArray(new String[0]);\"}</p>\r\n                <p> {\"List<String> list = new ArrayList<>(values);\"}</p>\r\n                <p> {\"Set<String> set = new HashSet<>(values);\"}</p>\r\n                <p> <i> Map객체.entries() </i> : 객체의 [키,값] 담은 배열 반환 </p>\r\n                <span className=\"mblock\">\r\n                    <p> </p>\r\n                </span>\r\n            </span>\r\n            {/* <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\"> </a> </span>\r\n                <span className=\"mblock\">\r\n                    <p> </p>\r\n                </span>\r\n            </span> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JavaBasic;","import React from 'react';\r\n\r\nconst JspServletBasic = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. 서블릿과 JSP(하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#HttpServlet 클래스\">1. HttpServlet 클래스 </a>\r\n                        <a href=\"#HttpServletRequest 클래스\">2. HttpServletRequest 클래스 </a>\r\n                        <a href=\"#HttpServletResponse 클래스\">3.HttpServletResponse 클래스 </a>\r\n                        <a href=\"#HttpSession 클래스\">4.HttpSession 클래스 </a>\r\n                        <a href=\"#JSP 커스텀태그\">JSP 커스텀태그 tag방식 </a>\r\n                        <a href=\"#JSP커스텀태그2 tld방식\">JSP커스텀태그2 tld방식</a>\r\n                        <a href=\"#JSP커스텀태그3\">JSP커스텀태그3</a>\r\n                        <a href=\"#JSTL\">JSTL </a>\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"JSP커스텀태그\"> JSP 커스텀태그 </a> </span>\r\n                <a href=\"https://gangzzang.tistory.com/entry/JSP-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%83%9C%EA%B7%B8Custom-Tag\" target=\"_blank\"> 참고사이트</a>\r\n                <p> 1. WEB-INF - tags 폴더 - 태그파일명.tag파일 </p>\r\n                <p> 2. .tag에서 커스텀태그 정의 </p>\r\n                <span className=\"mblock\">\r\n                    <p> <i> &lt;%@tag language=\"java\" pageEncoding=\"UTF-8\" body-content=\"empty\"%&gt;</i> : 태그 파일의 정보 명시</p>\r\n                    <span className=\"sblock\">\r\n                        <p> <i> body-content = </i>  empty: 몸체가 없음 , scriptless: (스트립틀릿,스크립팅,선언문)은 올수없음, tagdependent: 태그를 몸체로 사용\r\n                            ,JSP: JSP에 들어가는 내용이면 모두 가능\r\n                        </p>\r\n                    </span>\r\n                    <p> <i> &lt;%@taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%&gt; </i>\r\n                        :  태그파일에서 사용할 태그라이브러리 명시</p>\r\n                    <p> <i> &lt;%@ tag import =\"java.util.Arraylist\" %&gt;</i> : 자바 클래스 임포트 </p>\r\n                    <p> <i> &lt;%@ attribute name=\"매개변수\"%&gt;</i> : JSP에서 매개변수로 받아와 {\"${매개변수}\"}와 같이 사용 </p>\r\n                    <p> 나머지는 HTML 코드 작성 </p>\r\n                </span>\r\n                <p> 3. JSP에서 커스텀태그 사용 </p>\r\n                <span className=\"mblock\">\r\n                    <p> &lt;%@ prefix=\"사용할커스텀태그이름 taglib tagdir=\"/WEB-INF/tags\"\"%&gt; </p>\r\n                    <p> &lt;사용할커스텀태그이름:태그파일명 매개변수=\"값\"/&gt; </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"JSP커스텀태그2 tld방식\">JSP커스텀태그2 tld방식 </a> </span>\r\n                <p> 1. WEB-INF - tld 폴더 - 태그파일명.tld파일 </p>\r\n                <p> 2. .tld에서 커스텀태그 참고 </p>\r\n                <span className=\"mblock\">\r\n                    <p> {\"<taglib>\"} </p>\r\n                    <p> {\"<tag>\"} </p>\r\n                    <p> &nbsp;&nbsp;{\"<name>student</name>\"} </p>\r\n                    <p> &nbsp;&nbsp;{\"<tag-class>패키지.TagHandler클래스</tag-class>\"} </p>\r\n                    <p> &nbsp;&nbsp;{\"<body-content>scriptless</body-content>\"} </p>\r\n                    <p> &nbsp;&nbsp;{\"<attribute>\"} </p>\r\n                    <p> &nbsp;&nbsp;&nbsp;&nbsp;{\"<name>border</name>\"} </p>\r\n                    <p> &nbsp;&nbsp;&nbsp;&nbsp;{\"<required>true</required>\"} </p>\r\n                    <p> &nbsp;&nbsp;{\"</attribute>\"} </p>\r\n                    <p> {\"</tag>\"} </p>\r\n                    <p> {\"/taglib\"} </p>\r\n                </span>\r\n                <p> 3. jsp에서 커스텀태그 사용 </p>\r\n                <span className=\"mblock\">\r\n                    <p> <i> &lt;taglib uri=\"/WEB-INF/tld/stutag.tld\" prefix=\"mytag\"%&gt; </i>\r\n                        :  태그파일에서 사용할 태그라이브러리 명시</p>\r\n                    <p> <i> &lt;mytag:student border=\"10\"&gt;학생 목록&lt;/mytag:student&gt;</i> : 자바 클래스 임포트 </p>\r\n                </span>\r\n                <p> 4. .java 정의 </p>\r\n                <p> 파일명은 TagHandler 처럼 사용하는 것 같다</p>\r\n                <span className=\"mblock\">\r\n                    <p> SimpleTagSupport 클래스 상속</p>\r\n                    <p> public void doTag()에 정의하고 사용</p>\r\n                    <p> 추가 사용방법은 나중에 인터넷 참고 </p>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JspServletBasic;","import React from 'react';\r\n\r\nconst JspServletBulletinBoard = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. 서블릿과 JSP(하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#서블릿 실행하기\">1. 서블릿 실행하기 </a>\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"서블릿 실행하기\"> 1. MVC2 모델 설계 </a> </span>\r\n                <p> 게시판을 만들기 위하여 설계를 먼저 대략하고 진행 </p>\r\n                <span className=\"mblock\">\r\n                    {/* <p> <img src={process.env.PUBLIC_URL + '/img/Servlet.png'} /> </p> */}\r\n                </span>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JspServletBulletinBoard;","import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst JspServletJstl = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. JSTL (하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#JSTL core tag\"> 1. JSTL core tag </a>\r\n                        <a href=\"#JSTL function tag\"> 2. JSTL function tag </a>\r\n                        <a href=\"#JSTL formatting tag\"> 3. JSTL formatting tag </a>\r\n                        <a href=\"#JSTL XML tag\"> 4. JSTL XML tag </a>\r\n                        <a href=\"#JSTL SQL tag\"> 5. JSTL SQL tag </a>\r\n                        {/* <a href=\"#\"> </a> */}\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            {/* <a href=\"https://gangzzang.tistory.com/entry/JSP-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%83%9C%EA%B7%B8Custom-Tag\" target=\"_blank\"> 참고사이트</a> */}\r\n            <span className=\"lblock\">\r\n                <p> <a href=\"https://velog.io/@ye050425/JSP-JSTL-%EC%A0%95%EB%A6%AC\" target=\"_blank\">참고사이트</a> </p>\r\n                <p> JSTL: 커스텀태그 기술을 이용해서 일반적으로 많이 사용되는 기능들을 표준화한것 </p>\r\n                <p> 접근 가능한 내장 객체 4종류 : application,session,request,page </p>\r\n                <span className=\"mtitle\"> <a name=\"JSTL core tag\">  1. JSTL core tag </a> </span>\r\n                <p> &lt;%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %&gt; </p>\r\n                <p> 변수지원, URL관리, 흐름 제어 등</p>\r\n                <span className=\"mblock\">\r\n                    <span className=\"stitle\"> <a name=\"JSTL c:out\">  1. JSTL c:out </a> </span>\r\n                    <p> HTML 화면에 출력 </p>\r\n                    <span className=\"sblock\">\r\n                        <p> &lt; c:out value=\"${\"{\"}출력할 내용{\"}\"}\" &gt;</p>\r\n                    </span>\r\n                    <span className=\"stitle\"> <a name=\"JSTL c:if\">  2. JSTL c:if </a> </span>\r\n                    <span className=\"sblock\">\r\n                        <p> &lt; c:if test=\"${\"{\"}조건식{\"}\"}\" &gt;</p>\r\n                        <p> &lt; /c:if &gt;</p>\r\n                    </span>\r\n                    <span className=\"stitle\"> <a name=\"JSTL c:choose,when,otherwise\">  3. JSTL c:choose,when,otherwise </a> </span>\r\n                    <span className=\"sblock\">\r\n                        <p> &lt; c:choose &gt;</p>\r\n                        <p> &nbsp;&nbsp;&lt; c:when test=\"${\"{\"}조건식{\"}\"}\" &gt;</p>\r\n                        <p> &nbsp;&nbsp;&lt; /c:when &gt;</p>\r\n                        <p> &nbsp;&nbsp;&lt; c:when test=\"${\"{\"}조건식{\"}\"}\" &gt;</p>\r\n                        <p> &nbsp;&nbsp;&lt; /c:when &gt;</p>\r\n                        <p> &nbsp;&nbsp;&lt; c:otherwise&gt;</p>\r\n                        <p> &nbsp;&nbsp;&lt; /c:otherwise &gt;</p>\r\n                        <p> &lt; /c:choose &gt;</p>\r\n                    </span>\r\n                    <span className=\"stitle\"> <a name=\"JSTL c:foreach\">  4. JSTL c:foreach </a> </span>\r\n                    <span className=\"sblock\">\r\n                        <p> &lt; c:forEach var=\"i\" begin=\"1\" end=\"2\" step=\"1\" &gt;</p>\r\n                        <p> &lt; /c:forEach&gt;</p>\r\n                    </span>\r\n                    <span className=\"sblock\">\r\n                        <p> &lt; c:forEach var=\"i\" items=\"${\"키\"}\" &gt;</p>\r\n                        <p> &lt; /c:forEach&gt;</p>\r\n                    </span>\r\n                    <span className=\"stitle\"> <a name=\"JSTL c:param\">  5. JSTL c:param </a> </span>\r\n                    <p> URL 매개변수를 추가 </p>\r\n                    <span className=\"sblock\">\r\n                        <p> &lt; c:url value=\"/경로\" var=\"URL경로값(get방식으로출력)\" &gt;</p>\r\n                        <p> &lt; c:param name=\"키\" value=\"값\" / &gt;</p>\r\n                        <p> &lt; c:param name=\"키\" value=\"값\" / &gt;</p>\r\n                        <p> &lt; /c:url  &gt;</p>\r\n                    </span>\r\n                    <span className=\"stitle\"> <a name=\"JSTL c:set\">  6. JSTL c:set </a> </span>\r\n                    <span className=\"sblock\">\r\n                        <p> &lt; c:set var=\"키\" scope=\"session\" value=\"${\"{\"}값{\"}\"}\" /&gt;</p>\r\n                        <p> &lt; c:out value=\"${\"{\"}키{\"}\"}\" /&gt;</p>\r\n                    </span>\r\n                    <span className=\"stitle\"> <a name=\"JSTL c:import\">  7. JSTL c:import </a> </span>\r\n                    <p> jsp에 inlcude와 비슷 </p>\r\n                    <span className=\"sblock\">\r\n                    </span>\r\n                    <span className=\"stitle\"> <a name=\"JSTL c:forTokens\">  8. JSTL c:forTokens </a> </span>\r\n                    <p> 문자열을 토큰으로 분리하여 사용, foreach와 비슷 </p>\r\n                    <span className=\"sblock\">\r\n                        <p> &lt; c:forTokens items=\"문자열\" delims=\"구분문자\" var=\"키\"  &gt;</p>\r\n                        <p> &lt; /c:forTokens &gt;</p>\r\n                    </span>\r\n                    <span className=\"stitle\"> <a name=\"JSTL c:catch\">  9. JSTL c:catch </a> </span>\r\n                    <p> 에러가 발생할 경우 예외처리 </p>\r\n                    <span className=\"sblock\">\r\n                        <p> &lt; c:catch var=\"키\" &gt;</p>\r\n                        <p> &lt; /c:catch  &gt;</p>\r\n                        <p> c:if test=\"${\"{\"} 예외키 != null {\"}\"}\"</p>\r\n                    </span>\r\n                    <span className=\"stitle\"> <a name=\"JSTL c:redirect\">  10. JSTL c:redirect </a> </span>\r\n                    <p> 리다이렉트 처리 </p>\r\n                    <span className=\"sblock\">\r\n                        <p> &lt; c:redirect url=\"주소\" &gt;</p>\r\n                        <p> &lt; c:param name=\"\" &gt; 값 &lt; /c:param&gt; </p>\r\n                        <p> &lt; /c:redirect &gt;</p>\r\n                    </span>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"JSTL function tag\">  2. JSTL function tag </a> </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <span className=\"stitle\"> <a name=\"\">  </a> </span>\r\n                    <span className=\"sblock\">\r\n                    </span>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"JSTL formatting tag \"> 3. JSTL formatting tag </a> </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <span className=\"stitle\"> <a name=\"\">   </a> </span>\r\n                    <span className=\"sblock\">\r\n                    </span>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"JSTL XML tag \"> 4. JSTL XML tag </a> </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <span className=\"stitle\"> <a name=\"\">   </a> </span>\r\n                    <span className=\"sblock\">\r\n                    </span>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"JSTL SQL tag\"> 5. JSTL SQL tag </a> </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <span className=\"stitle\"> <a name=\"\">   </a> </span>\r\n                    <span className=\"sblock\">\r\n                    </span>\r\n                </span>\r\n            </span>\r\n            {/* <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <span className=\"mblock\">\r\n                    <span className=\"sblock\">\r\n                    </span>\r\n                </span>\r\n            </span> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JspServletJstl;","import React from 'react';\r\n\r\nconst Blank = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"lblocknav_container\">\r\n                <div className=\"lblocknav\">\r\n                    <span className=\"mtitle\"> 0. JSP EL (하이퍼링크) </span>\r\n                    <span className=\"mblock\">\r\n                        <p className=\"hyperlink\">\r\n                            <details className=\"list_style\">\r\n                                <summary className=\"list_style\"> 123123123 </summary>\r\n                                <p> 123123123 </p>\r\n                                <details>\r\n                                    <summary> 123123123 </summary>\r\n                                    <p> 123123123 </p>\r\n                                </details>\r\n                            </details>\r\n                            <details className=\"list_style\">\r\n                                <summary className=\"list_style\"> 123123123 </summary>\r\n                                <p> 123123123 </p>\r\n                                <details>\r\n                                    <summary> 123123123 </summary>\r\n                                    <p> 123123123 </p>\r\n                                </details>\r\n                            </details>\r\n                            {/* <a href=\"#\"> </a> */}\r\n                        </p>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <div className=\"common_style\" >\r\n                {/* <a href=\"https://gangzzang.tistory.com/entry/JSP-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%83%9C%EA%B7%B8Custom-Tag\" target=\"_blank\"> 참고사이트</a> */}\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                    <span className=\"lblock\">\r\n                        <span className=\"sblock\">\r\n                        </span>\r\n                    </span>\r\n                </span>\r\n                {/* <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"sblock\">\r\n                    </span>\r\n                </span>\r\n            </span> */}\r\n            </div>\r\n        </ >\r\n    );\r\n}\r\n\r\nexport default Blank;","import React from 'react';\r\n\r\nconst ReactBasic = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. 리액트 기초(하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#프로젝트 설정\">1. 프로젝트 설정 </a>\r\n                        <a href=\"#리액트 깃허브에 올리기\">2. 리액트 깃허브에 올리기 </a>\r\n                        <a href=\"#리액트의 구조\">3. 리액트의 구조 </a>\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            {/* <p> <img src={process.env.PUBLIC_URL + '/img/Servlet.png'} /> </p> */}\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 1. 프로젝트 설정 </a> </span>\r\n                <p> <i> 1. </i>  Node.js 설치를하고 cmd에서 설치되었는지 확인, node -v , npm -v </p>\r\n                <p> <i> 2. </i> Vscode 설치 </p>\r\n                <p> <i> 3. </i> cmd에서 cd React시작할폴더명 </p>\r\n                <p> <i> 4. </i> yarn create react-app 리액트폴더 혹은 npm create react-app 리액트폴더명 (폴더생성됨)</p>\r\n                <p> <i> 4.1 </i> 만약에 yarn이 설치되지 않는다면 npm install -g yarn </p>\r\n                <p> <i> 5. </i> cd 리액트폴더명 </p>\r\n                <p> <i> 6. </i> npm start  입력하여서 잘 작동되나 확인 </p>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"리액트 깃허브에 올리기\"> 2. 리액트 깃허브에 올리기 </a> </span>\r\n                <p><i>1.</i> github에 가서 저장소를 하나 만들기 (read.me 파일없이만들기)</p>\r\n                <p><i>2.</i> 만든 상태로 창을 가만히 놔두기( 복붙할 내용이 존재함)</p>\r\n                <p><i>3.</i> 리액트로 돌아와서 npm install gh-pages --save-dev 입력 </p>\r\n                <p><i>4.</i> 리액트 폴더에 pakage.json 파일을 열어서 아래와 같이 넣어주기</p>\r\n                <p><i>5.</i> 위쪽에 name위에 \"homepage\": \"http://깃허브유저명.github.io/저장소이름\"</p>\r\n                <p><i>6.</i> \"scripts: 부분 안에 \"predeploy\": \"npm run build\",  \"deploy\": \"gh-pages -d build\",</p>\r\n                <p><i>7.</i> 터미널 창에 git init 입력 (깃폴더 생성됨)</p>\r\n                <p><i>8.</i> 깃허브 창에서 git remote ~ 부분을 복붙해서 붙여넣기 </p>\r\n                <p><i>9.</i> npm run deploy <small> build 하는 과정 </small> </p>\r\n                <p><i>10.</i> git add . <small> 깃허브에 올릴 깃을 만드는 과정? </small> </p>\r\n                <p><i>11.</i> git commit -m \"커밋내용\" <small>커밋</small> </p>\r\n                <p><i>12.</i> git push -u origin master <small> 깃허브에 master 브랜치에 push </small> </p>\r\n                <p> 다음부터는 9~12 번만 반복하여서 사용</p>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"리액트의 구조\"> 3. 리액트 기초 설명 </a> </span>\r\n                <p><i>1.</i> JSX파일로 JS파일과는 차이가 있다. </p>\r\n                <p><i>2.</i> 페이스북에서 만든 오픈 소스 자바스크립트 UI라이브러리 </p>\r\n                <p><i>3.</i> 컴포넌트 형태로 사용이된다. </p>\r\n                <p><i>4.</i> HTML class를 className , for을  htmlFor 와 같이 약간의 차이가 있다. </p>\r\n                <p><i>5.</i> lower Camel Case 방식을 사용한다. </p>\r\n                <p><i>6.</i> .jsx파일은 대문자로 시작한다. </p>\r\n                <p><i>7.</i> {\"{\"}{\"}\"} 중괄호를 이용하면 변수들을 처리한다. </p>\r\n                <p><i>8.</i> 컴포넌트에서 사용한 리소스를 회수하는 것이 중요하다. </p>\r\n                <p><i>9.</i> 싱글 페이지이므로 렌더링을 부분적으로 일어나게 해야한다.</p>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 4. 리액트 코드 돌려보기 </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 5. css적용 방법 </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 6. 함수 </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 7. 조건문 </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 8. 반복문 </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 9. 컴포넌트 </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 10. Props </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 11. useState </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 12. useRef </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 13. useEffect </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 14. ReactHook </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 15. ReactRouter </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 16. React에 Emmet추가하는법 </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 17. React Redux </a> </span>\r\n                <span clsssName=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReactBasic;","import React from 'react';\r\n\r\nconst SpringInformation = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. 스프링 프레임워크(하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#스프링이란\">1. 스프링이란 </a>\r\n                        <a href=\"#스프링 프레임워크의 기본 동작원리\">2. 스프링 프레임워크의 기본 동작원리 </a>\r\n                        <a href=\"#스프링 프레임워크의 프로젝트 차이\">3. 스프링 프레임워크의 프로젝트 차이 </a>\r\n                        <a href=\"#DL 과 DI\"> 4. DL 과 DI  </a>\r\n                        <a href=\"#MyBastis\"> 5. MyBastis  </a>\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            {/* <p> <img src={process.env.PUBLIC_URL + '/img/Servlet.png'} /> </p> */}\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"스프링이란\"> 1. 스프링이란 </a> </span>\r\n                <p> 1. 스프링은 자바 플랫폼 프레임워크 , 기업을 대상으로 개발하기 위한 기능을 제공하는 솔루션</p>\r\n                <p> 2. 객체 생성 및 소멸, 라이프사이클을 관리한다</p>\r\n                <p> 3. 스프링은 IOC(Inversion of Control)기반의 프레임 워크이다. 기존에 프로그램은 객체 생성 부터 메소드 호출까지 직접 사용자가 제어를 하였지만\r\n                    IOC에서는 제어를 특별한 객체에 넘긴다</p>\r\n                <p> 4. DL(Dependency LookUp) 의존성 검색 : 컨테이너에서 객체들을 관리하기 위해 별도의 저장소에\r\n                    빈을 저장하는데 개발자들이 컨테이너가 제공하는 API를 이용하여 빈을 검색하는 방법\r\n                    <p> DI(Dependency Injection) 의존성 주입 : 객체가 서로 의존하는 관계가 될 때 의존성을 주입하는 것\r\n                        의존성은 하나의 객체가 다른 객체를 사용하고 있는 것을 의미, 각 클래스 사이에 필요로 하는\r\n                        의존관계를 빈 설정 정보를 바탕으로 컨테이너가 자동으로 연결해준다.\r\n                    </p>\r\n                    <p> 5. POJO : 코드가 심플해지고 테스트 하기 좋으며, 요구사항에 기술적 선택을 바꿀 수 있음</p>\r\n                    <p> EJB는 확장이 가능하고 재사용하기 위한 로직으로 사용이 되었는데 한 가지의 기능을\r\n                        위해 불필요한 복잡한 로직이 과도하게 들어가는 단점이 있었다. 이것을 POJO 를 사용해서\r\n                        의존성이 없고 테스트와 유지보수가 편리한 장점을 가지게 하였다. 프레임워크를 따르지 않는\r\n                        자바 객체를 지칭한다.\r\n                    </p>\r\n                    <p> 6. AOP(Aspect Oriented Programming) 관점 지향 프로그래밍 , 기존에 사용하던 프로그래밍 방법은\r\n                        객체지향 프로그래밍을 사용하지만 중복된 코드들이 많고 확장,유지 보수를 떨어뜨린다. AOP에서는\r\n                        핵심기능(서비스)와 공통기능(인증,필터 등)을 분리하여 유지보수가 더 좋아지며 재활용성이\r\n                        ㄴ높아진다.\r\n                    </p>\r\n                    <p>\r\n                        7. 컨테이너 : servlet 컨테이너, ejb 컨테이너 등 여러가지의 컨테이너를 볼 수 있다. 컨테이너는\r\n                        인스턴스의 주기와 추가적인 기능을 관리하는 역할을 한다 servlet컨테이너를 개발자가 어느 정도\r\n                        관여를 하지만 스프링 컨테이너는 개발자가 관여하지 않고 컨테이너의 영역으로 사용되는 것이다\r\n                        대표적으로 BeanFactory와 ApplicationContext 2개의 컨테이너가 있다.\r\n                    </p>\r\n                </p>\r\n                <span className=\"mblock\">\r\n                    {/* <h3> HTML </h3>\r\n                    <h3> 자바 클래스 </h3> */}\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"스프링 프레임워크의 기본 동작원리\"> 2. 스프링 프레임워크의 기본 동작원리 </a> </span>\r\n                <p> 1. 클라이언트 요청 </p>\r\n                <p> 2. DispathcerServlet 접근 </p>\r\n                <p> 3. HandlerMapping 참조하여 Controller에 연결 </p>\r\n                <p> 4. Controller에 연결되어 Service를 호출 DAO를 통해 DB에서 꺼내온다 </p>\r\n                <p> 5. 모델과 뷰를 객체에 담아 DispatcherServlet 반환한다 </p>\r\n                <p> 6. ViewResolver를 통해 View와 연결되고 화면으로 출력 </p>\r\n\r\n                <span className=\"mblock\">\r\n                    <p> <img src={process.env.PUBLIC_URL + '/img/SpringBasicAction.png'} /> </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"스프링 프레임워크의 프로젝트 차이\"> 3. 스프링 프레임워크의 프로젝트 차이 </a> </span>\r\n                <p> 1. Spring Legacy Project : 일반적인 스프링 프레임워크 프로젝트 , 스프링 프레임워크 라이브러리 내장</p>\r\n                <p> 1-1. Simple Projects </p>\r\n                <p> 1-1-1. Simple Java : 최상의 패키지 없이 기본 Spring 구성 및 프로젝트로 사용하여 Java빌드를\r\n                    사용하여 간단한 Spring 프로젝트를 작성\r\n                </p>\r\n                <p> 1-1-2. Simple Spring Maven : Spring 라이브러리의 기본 세트를 포함하는 Maven을 사용하여\r\n                    간단한 Spring 프로젝트를 작성\r\n                </p>\r\n                <p> 1-1-3. Simple Spring Web Maven : Spring 웹 라이브러리의 기본 세트를 포함 Maven을 사용하여 간단한\r\n                    Spring 웹 프로젝트를 생성 </p>\r\n                <p> 1-2. Spring MVC Project : 기본적으로 MVC형태로 메이븐까지 세팅이 되어 생성 </p>\r\n                <p> 2. Spring Starter Project : 스프링 부트 프레임워크 , 간단한 라이브러리 추가하는 것으로 프레임워크를 포함 할 수 있음 </p>\r\n                <p> 3.  </p>\r\n                <p>  </p>\r\n                <p>  </p>\r\n\r\n                <span className=\"mblock\">\r\n                    <p> <img src={process.env.PUBLIC_URL + '/img/SpringBasicAction.png'} /> </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"DL 과 DI \"> 4. DL 과 DI </a> </span>\r\n                <p> 1. DL </p>\r\n                <p>  </p>\r\n                <p> 2. DI(Dependency Injection) 의존성 주입 : 컨테이너가 빈 정보를 바탕으로\r\n                    자동으로 연결해 준다. 코드가 단순해지고 컴포넌트간의 결합도가 제거된다.\r\n                </p>\r\n                <p> 2-1. 빈 설정파일(xml,어노테이션)에서 의존관계가 필요한 정보를 추가하면 된다. </p>\r\n                <p> 2-2. 객체 레퍼런스를 컨테이너로부터 받아 실행시 동적으로 의존관계가 생성 </p>\r\n                <p> 2-3. 컨테이너가 애플리케이션 코드에 의존관계를 주입해주는 것 </p>\r\n                <p> DI의 유형 3가지 </p>\r\n                <p> 1. Setter 메서드를 이용한 의존성 삽입 </p>\r\n                <p> 2. 생성자를 이용한 의존성 삽입 </p>\r\n                <p> 3. 일반 메서드를 이용한 의존성 삽입 </p>\r\n                <p> DI Bean을 관리하는 컨테이너 = Bean Factory </p>\r\n\r\n                <span className=\"mblock\">\r\n                    <p> <img src={process.env.PUBLIC_URL + '/img/SpringBasicAction.png'} /> </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"MyBastis\"> 5. MyBastis </a> </span>\r\n                <p> 자바의 관계형 데이터 베이스 프로그래밍 좀 더 쉽게 할 수 있는 프레임워크 </p>\r\n                <p> 기존의 JDBC보다 더 편하게 사용하기 위해 개발 </p>\r\n                <p> </p>\r\n                <p> </p>\r\n                <p> </p>\r\n\r\n                <span className=\"mblock\">\r\n                    <p> <img src={process.env.PUBLIC_URL + '/img/SpringBasicAction.png'} /> </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"CGLIB\"> 6. CGLIB </a> </span>\r\n                <p> <a href=\"https://blog.naver.com/gowjr300/222377148682\" target=\"_blank\"></a></p>\r\n                <p> CGLIB라는 바이트코드 조작 라이브러리 </p>\r\n                <p> @Configuration이 존재해야 제대로 작동하고 만약에 없으면 여러개의 빈객체가 생성됨</p>\r\n                <p> 하는 역할은 @Bean으로 클래스가 호출이 되었을 때 여러개를 생성하지 않고\r\n                    기존 클래스를 기반으로 다른 클래스를 하나 만들어서 다시 호출이 되었을때\r\n                    이미 컨테이너에 존재한다면 새로 생성하지 않고 반환을 하고 없다면 생성을\r\n                    하는 역할을 함으로써 싱글톤이 보장이 되게하는 역할 </p>\r\n                <p> @Autowire로 해결이 가능하다고 하는데 굳이...</p>\r\n                <p> </p>\r\n\r\n                <span className=\"mblock\">\r\n                    <p> <img src={process.env.PUBLIC_URL + '/img/SpringBasicAction.png'} /> </p>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpringInformation;","import React from 'react';\r\n\r\nconst SpringBasic = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. 스프링 프레임워크 코드(하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#프로젝트 설정\">1. 프로젝트 설정 </a>\r\n                        <a href=\"#View 만들어 보기\">2.  View 만들어 보기 </a>\r\n                        <a href=\"#Controller 만들어 보기\">3.  Controller 만들어 보기 </a>\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            {/* <p> <img src={process.env.PUBLIC_URL + '/img/Servlet.png'} /> </p> */}\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"프로젝트 설정\"> 1. 프로젝트 설정 </a> </span>\r\n                <p> 1. 자바 11 버전 , cmd창 : java -version 입력 </p>\r\n                <p> <a href=\"https://www.oracle.com/kr/java/technologies/javase-downloads.html\" target=\"_blank\"> 자바 다운로드</a></p>\r\n                <p> 2. <a href=\"https://start.spring.io/\" target=\"_blank\"> 스프링부트로 시작설정</a>\r\n                    Gradle Project , java, 2.@.1 , hello, hello 입력 우측에 dependiencies 추가 Spirng web, thymeleaf ,spring boot devtools </p>\r\n                <p> 3. 설정이 되었으면 generate 버튼 누르고 , 원하는 폴더에 압축 풀기  </p>\r\n                <p> 4. inteliJ를 켜서 import , git에 추가하는 것 무조건 하기 </p>\r\n                <p> 5. src - main -java - 패키지? - 클래스   , helloaplication 실행(run) 해보기 ( 10초이상 걸림)</p>\r\n                <p> 6. 인터넷 창에 http://127.0.0.1:8080 입력 , 화이트 라벨 에러 페이지가 뜨면 정상 </p>\r\n                <p> 7. 상단메뉴 file - settings - build, execution, deployment - build tools\r\n                    - gradle - build and run using 과 run tests using을 gradle에서 inteliJ로 변경 </p>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"View 만들어 보기\"> 2. View 만들어 보기 </a> </span>\r\n                <p> 1. src - main - resources - static - index.html 만들고 body태그에 hello world 입력 </p>\r\n                <p> 2. 서버를 실행하고 브라우저에 http://localhost:8080/ </p>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <p> 해석 : 첫번째로 static 위치에 index.html 파일을 찾고 없으면 index 템플릿을 찾는다 </p>\r\n                    <p> <img src={process.env.PUBLIC_URL + '/img/SpringBootWelcomePage.png'} /> </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"Controller 만들어 보기\">  </a> 3. Controller 만들어 보기 </span>\r\n                <span className=\"mblock\">\r\n                    <p> 1. src - main - java - 패키지 - 패키지 만들기(controller) - 클래스 만들기(HelloController) </p>\r\n                    <p> <img src={process.env.PUBLIC_URL + '/img/Spring_Controller_HelloController.png'} /> </p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> html thymeleaf 템플릿엔진 코드 사용하기 </p>\r\n                    <p> 2. src - main - resources - templates - hello.html 만들기 </p>\r\n                    <p> <img src={process.env.PUBLIC_URL + '/img/Spring_Hello_Html.png'} /> </p>\r\n                </span>\r\n                <span className=\"mblock\">\r\n                    <p> 3. run하고 브라우저에 localhost:8080/hello 입력하기 </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\"> 4. cmd창으로 빌드하고 실행해보기 </a> </span>\r\n                <p> 0. window에서 하는 방법 </p>\r\n                <p> 1. cmd창 열기 </p>\r\n                <p> 2. cd 파일경로 입력</p>\r\n                <p> 3. gradlew.bat build 입력 </p>\r\n                <p> 4. cd build </p>\r\n                <p> 5. cd libs </p>\r\n                <p> 6. java -jar 파일명-0.0.1-SNAPSHOT.jar  </p>\r\n                <p> 이미 intelliJ에서 실행중이 였다면 끄고서 실행  </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  5. 간단한 회원 관리 만들어보기 </a> </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\"> 6. 테스트 코드 만들어 보기 </a> </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <p> @Configuration </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  7. 컴포넌트 스캔 방식이 아닌 자바코드로 스캔하기 </a> </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpringBasic;","import React from 'react';\r\n\r\nconst SpringLibrary = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. 스프링 라이브러리(하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#톰캣 라이브러리\">1-1. 톰캣 라이브러리 </a>\r\n                        <a href=\"#MVC 라이브러리\">1-2. MVC 라이브러리 </a>\r\n                        <a href=\"#스프링부트 라이브러리\">2-1. 스프링부트 라이브러리 </a>\r\n                        <a href=\"#스프링부트 로그 라이브러리\">2-2. 스프링부트 로그 라이브러리 </a>\r\n                        <a href=\"#스프링부트 테스트 라이브러리\">3-1. 스프링부트 테스트 라이브러리 </a>\r\n                        <a href=\"#스프링부트 데브툴스 라이브러리\">4-1. 스프링부트 데브툴스 라이브러리 </a>\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            {/* <p> <img src={process.env.PUBLIC_URL + '/img/Servlet.png'} /> </p> */}\r\n\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"spring-boot-starter-web.lib\"> 1. spring-boot-starter-web.lib </a> </span>\r\n                <span className=\"mblock\">\r\n                    <span className=\"stitle\"> <a name=\"톰캣 라이브러리\"> 1-1. 톰캣 라이브러리 </a> </span>\r\n                    <p> tomcat : 웹서버를 실행할 때 사용하는 톰캣 라이브러리 </p>\r\n                    <span className=\"sblock\">\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringTomcatLibrary.png'} /> </p>\r\n                    </span>\r\n                    <p> mvc : 스프링에서 mvc패턴을 이용할 때 필요한 라이브러리 </p>\r\n                    <span className=\"stitle\"> <a name=\"MVC 라이브러리\"> 1-2. MVC 라이브러리 </a> </span>\r\n                    <span className=\"sblock\">\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringMvcLibrary.png'} /> </p>\r\n                    </span>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"spring-boot-starter-thymeleaf.lib\"> 2. spring-boot-starter-thymeleaf.lib </a> </span>\r\n                <p> thymeleaf : 템플릿 엔진(View) </p>\r\n                <span className=\"mblock\">\r\n                    <span className=\"stitle\"> <a name=\"스프링부트 라이브러리\"> 2-1. 스프링부트 라이브러리 </a> </span>\r\n                    <span className=\"sblock\">\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringBootLibrary.png'} /> </p>\r\n                    </span>\r\n                    <span className=\"stitle\"> <a name=\"스프링부트 로그 라이브러리\"> 2-2. 스프링부트 로그 라이브러리 </a> </span>\r\n                    <p> slf4j : </p>\r\n                    <p> logback(추천) : </p>\r\n                    <span className=\"sblock\">\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringLogLibrary.png'} /> </p>\r\n                    </span>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"spring-boot-starter-test.lib\"> 3. spring-boot-starter-test.lib </a> </span>\r\n                <span className=\"mblock\">\r\n                    <span className=\"stitle\"> <a name=\"스프링부트 테스트 라이브러리\"> 3-1. 스프링부트 테스트 라이브러리 </a> </span>\r\n                    <p> Junit : 테스트 프레임워크 </p>\r\n                    <p> mockito : 목 라이브러리 </p>\r\n                    <p> assertj : 테스트 코드를 편하게 작성하는 것을 도와주는 라이브러리 </p>\r\n                    <p> spring-test : 스프링 통합 테스트 지원 라이브러리 </p>\r\n                    <span className=\"sblock\">\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringBootTestLibrary.png'} /> </p>\r\n                    </span>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"spring-boot-devtools.lib\"> 4. spring-boot-devtools.lib </a> </span>\r\n                <span className=\"mblock\">\r\n                    <p> base classloader 과  restart classloader 2개의 클래스로더를 통해 프로그램을 실행 </p>\r\n                    <p> base classloader: 값을 직접 변경하지 않고 참조만 하는 파일들을 실행하는 역할 </p>\r\n                    <p> restart classloader : 개발자가 작업하고 있는 클래스 파일을 실행하는 역할 </p>\r\n                    <p> devtools는 classpaht에 class파일의 변화를 감지하여 서버를 재시작하는 원리이다. </p>\r\n                    <p> 라이브러리 기능 </p>\r\n                    <p> 1. property dafaults : 속성을 기본값으로 설정, 개발 옵션을 비활성화 </p>\r\n                    <p> 2. automatic restart : 클래스의 경로가 변경될 때마다 자동 재시작 </p>\r\n                    <p> 3. live leload : 웹 브라우저 변경시 자동 새로고침 </p>\r\n                    <p> 4. global settings : dev 프로퍼티 관리 가능</p>\r\n                    <p> 5. remote applications : 원격 개발 지원</p>\r\n                    <span className=\"stitle\"> <a name=\"스프링부트 데브툴스 라이브러리\"> 4-3. 스프링부트 데브툴스 라이브러리 </a> </span>\r\n                    <span className=\"sblock\">\r\n                        <p> 1. bulid.gradle 에 의존성 추가</p>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringBootDevtoolsLibrary_addGradle.png'} /> </p>\r\n                        <p> 2. ctrl + shift + a 를 눌러 registry 입력하고 들어가서 compiler.automake.allow.when.app.running 체크</p>\r\n                        <p> 3. ctrl + shift + s (설정) - complier - build project automatically 체크 </p>\r\n                        <p> 위와 같이 하였지만 수정하고 새로고침하면 바뀌기는 하는데.. 그다음은 자동으로 되지 않음</p>\r\n                        <p> </p>\r\n                    </span>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpringLibrary;\r\n\r\n","import React from 'react';\r\n\r\nconst SpringBasic = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. 스프링 프레임워크 코드(하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#bootJar 에러\">1. bootJar </a>\r\n                        <a href=\"#intellij 실행시 파일에 빨간 글씨\">2. intellij 실행시 파일에 빨간 글씨 </a>\r\n                        <a href=\"#intellij gradle프로젝트 작동 안될 때\">3. intellij gradle프로젝트 작동 안될 때 </a>\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            {/* <p> <img src={process.env.PUBLIC_URL + '/img/Servlet.png'} /> </p> */}\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"bootJar 에러\"> 1. bootJar </a> </span>\r\n                <p> 윈도우에서 cmd 명령어로 gradlew.bat build을 하였을 때 발생</p>\r\n                <p> <i> 오류코드 : </i> </p>\r\n                <span className=\"mblock\">\r\n                    <p>\r\n                        <p>C:\\Users\\sk\\Desktop\\git_ssssksss\\CODE\\IntelliJ\\demo&gt;gradlew.bat build&gt; Task :bootJar FAILED</p>\r\n                        <p>FAILURE: Build failed with an exception.</p>\r\n                        <p>* What went wrong:</p>\r\n                        <p>Execution failed for task ':bootJar'.</p>\r\n                        <p>&gt; Failed to calculate the value of task ':bootJar' property 'mainClass'.</p>\r\n                        <p>&gt; Main class name has not been configured and it could not be resolved</p>\r\n                        <p>* Try:</p>\r\n                        <p>Run with --stacktrace option to get the stack trace. Run with --info</p>\r\n                        <p>or --debug option to get more log output. Run with --scan to get full insights.</p>\r\n                        <p>* Get more help at https://help.gradle.org</p>\r\n                        <p>BUILD FAILED in 6s</p>\r\n                        <p>4 actionable tasks: 1 executed, 3 up-to-date</p>\r\n\r\n                    </p>\r\n                </span>\r\n                <p> <i> 원인 : </i> </p>\r\n                <p> 1. Main class name이 지정되지 않았다. -&gt; 빌드시 진입 지점을 찾지 못함   </p>\r\n                <p> <i> 해결 방법 :</i> </p>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"intellij 실행시 파일에 빨간 글씨\"> 2. intellij 실행시 파일에 빨간 글씨 </a> </span>\r\n                <p> </p>\r\n                <p> <i> 오류코드 : </i> </p>\r\n                <p> <i> 원인 : 깃경로에 포함이 되지 않아서 발생 </i> </p>\r\n                <p> <i> 해결 방법 : </i> 처음에 깃 경로에 파일 전부를 추가 </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"intellij gradle프로젝트 작동 안될 때\"> 3. intellij gradle프로젝트 작동 안될 때 </a> </span>\r\n                <p> 1. 프로젝트 파일에 .idea 폴더(설정파일)를 삭제하고 intellij 재시작하기 </p>\r\n                <p> <i> 오류코드 : </i> </p>\r\n                <p> <i> 원인 : </i> </p>\r\n                <p> <i> 해결 방법 :</i> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <p> </p>\r\n                <p> <i> 오류코드 : </i> </p>\r\n                <p> <i> 원인 : </i> </p>\r\n                <p> <i> 해결 방법 :</i> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <p> </p>\r\n                <p> <i> 오류코드 : </i> </p>\r\n                <p> <i> 원인 : </i> </p>\r\n                <p> <i> 해결 방법 :</i> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <p> </p>\r\n                <p> <i> 오류코드 : </i> </p>\r\n                <p> <i> 원인 : </i> </p>\r\n                <p> <i> 해결 방법 :</i> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <p> </p>\r\n                <p> <i> 오류코드 : </i> </p>\r\n                <p> <i> 원인 : </i> </p>\r\n                <p> <i> 해결 방법 :</i> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <p> </p>\r\n                <p> <i> 오류코드 : </i> </p>\r\n                <p> <i> 원인 : </i> </p>\r\n                <p> <i> 해결 방법 :</i> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <p> </p>\r\n                <p> <i> 오류코드 : </i> </p>\r\n                <p> <i> 원인 : </i> </p>\r\n                <p> <i> 해결 방법 :</i> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <p> </p>\r\n                <p> <i> 오류코드 : </i> </p>\r\n                <p> <i> 원인 : </i> </p>\r\n                <p> <i> 해결 방법 :</i> </p>\r\n                <span className=\"mblock\">\r\n                </span>\r\n            </span>\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpringBasic;","import React from 'react';\r\n\r\nconst SpringCode = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. 스프링 프레임워크 코드(하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#어노테이션\">1. 어노테이션 </a>\r\n                        <a href=\"#객체\">2. 객체 </a>\r\n                        <a href=\"#파라미터\">3. 파라미터 </a>\r\n                        <a href=\"#API\">4. API </a>\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            {/* <p> <img src={process.env.PUBLIC_URL + '/img/Servlet.png'} /> </p> */}\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"어노테이션\"> 1. 어노테이션</a> </span>\r\n                <span className=\"mblock\">\r\n                    <span className=\"stitle\"> <a name=\"IoC컨테이너가 관리하는 객체\"> 1. IoC컨테이너가 관리하는 객체 </a> </span>\r\n                    <span className=\"sblock\">\r\n                        <p> <i> @Componet 인터페이스선언 </i> : @Controller @Service @Repository등에 사용되어있음</p>\r\n                        <p> <i> 기능 : </i> 스프링 빈에 자동으로 등록이 된게 한다 </p>\r\n                        <p> 컴포넌트 스캔이라는 말이 나오면 이것과 관련이 있음 </p>\r\n                        <p> @Component </p>\r\n                        <p> public @interface Repository {\"{\"} </p>\r\n                        <p> {\"}\"} </p>\r\n                    </span>\r\n                    <span className=\"sblock\">\r\n                        <p> <i> @Controller 클래스선언</i> : 컨트롤러로 선언</p>\r\n                        <p> @Controller </p>\r\n                        <p> public class HelloController  {\"{\"} </p>\r\n                        <p> {\"}\"} </p>\r\n                    </span>\r\n                    <span className=\"sblock\">\r\n                        <p> <i> @Service 클래스선언</i> : 서비스 선언</p>\r\n                        <p> @Service </p>\r\n                        <p> public class HelloController  {\"{\"} </p>\r\n                        <p> {\"}\"} </p>\r\n                    </span>\r\n                    <span> </span>\r\n                    <span className=\"sblock\">\r\n                        <p> <i> @Repository 클래스선언 </i> : 저장소로 선언</p>\r\n                        <p> @Repository </p>\r\n                        <p> public class MemoryMemberRepository {\"{\"} </p>\r\n                        <p> {\"}\"} </p>\r\n                    </span>\r\n                    <span className=\"sblock\">\r\n                        <p> <i> @Configuration 클래스선언</i> : </p>\r\n                        <p> 빈 객체의 싱글톤을 보장해줌 </p>\r\n                        <p> Config.class를 상속받은 CGLIB프로시 빈을 생성 </p>\r\n                        <p> @Configuration </p>\r\n                        <p> public class SpringConfig{\"{\"}</p>\r\n                        <p> {\"}\"}</p>\r\n                    </span>\r\n                    <span className=\"sblock\">\r\n                        <span className=\"sstitle\">\r\n                            <p> <i> @Bean 메소드선언</i> : Ioc컨테이너가 관리하는 객체 </p>\r\n                            <p> <small> 메소드가 호출되면 구현체를 생성하고 반환함 </small></p>\r\n                        </span>\r\n                        <p> 클래스 객체 = applicationContext.getBean(클래스.class);</p>\r\n                        <p> 위 코드의 클래스를 보면 </p>\r\n                        <p> public 클래스(클래스변수자료형1 매개변수,클래스변수자료형2 매개변수) {\"{\"}</p>\r\n                        <p> this.클래스변수명1 = 매개변수(상속관계에 있는 클래스 객체); </p>\r\n                        <p> this.클래스변수명2 = 매개변수(클래스변수명); </p>\r\n                        <p> {\"}\"} </p>\r\n                        <p> <small>  or </small></p>\r\n                        <p> @Configuration </p>\r\n                        <p> @Bean</p>\r\n                        <p> public MemberService memberService() {\"{\"}</p>\r\n                        <p> return new MemberService(memberRepository()); </p>\r\n                        <p> {\"}\"}</p>\r\n                    </span>\r\n                    <span className=\"stitle\"> <a name=\"IoC컨테이너 등록된것 꺼내쓰기\"> 2.  IoC컨테이너 등록된것 꺼내쓰기 </a> </span>\r\n                    <span className=\"sblock\">\r\n                        <p> <i> @Autowired 생성자선언?</i> : (DI)</p>\r\n                        <p> 스프링이 관리하는 객체에서만 사용이 가능하다 </p>\r\n                        <p> @Autowired </p>\r\n                        <p> public MemberController(MemberService memberService)  {\"{\"} </p>\r\n                        <p> &nbsp;&nbsp; this.memberService = memberService </p>\r\n                        <p> {\"}\"} </p>\r\n                    </span>\r\n                </span>\r\n                <p> </p>\r\n                <span className=\"mtitle\"> <a name=\"\"> </a> </span>\r\n                <span className=\"mblock\">\r\n                    <span className=\"sblock\">\r\n                        <p> <i> @GetMapping 메소드선언</i> : URL에 있는 값을 맵핑해서 호출해준다.</p>\r\n                        <p>Get방식이다.</p>\r\n                        <p>@GetMapping(\"hello\")</p>\r\n                        <p>public String hello(Model model) {\"{\"}</p>\r\n                        <p>&nbsp;&nbsp;model.addAttribute(\"data\", \"hello\");</p>\r\n                        <p>&nbsp;&nbsp;return \"hello\"; <small> 리턴은 View 파일명</small></p>\r\n                        <p> {\"}\"}</p>\r\n                    </span>\r\n                    <span className=\"sblock\">\r\n                        <p> <i> @PostMapping 메소드선언</i> : URL에 있는 값을 맵핑해서 호출해준다.</p>\r\n                        <p>Post방식이다.</p>\r\n                        <p>@PostMapping(\"hello\")</p>\r\n                        <p>public String createFrom(MemberForm form) {\"{\"}</p>\r\n                        <p>&nbsp;&nbsp;Member member = new Member();</p>\r\n                        <p>&nbsp;&nbsp;member.setName(form.getName());</p>\r\n                        <p>&nbsp;&nbsp;memberService.join(member);</p>\r\n                        <p>&nbsp;&nbsp;return \"redirect:/\";</p>\r\n                        <p> {\"}\"}</p>\r\n                    </span>\r\n                </span>\r\n                <span className=\"mtitle\"> <a name=\"\"> </a> </span>\r\n                <span className=\"mblock\">\r\n                    <p> <i> @Transactional (테스트)클래스선언</i> : </p>\r\n                    <p> DB테스트를 하고나서 롤백이 되게함 </p>\r\n                    <span className=\"sblock\">\r\n                        <p> @Transactional </p>\r\n                        <p> class Test클래스 {\"{\"}</p>\r\n                        <p> {\"}\"}</p>\r\n                    </span>\r\n                </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"객체\"> 2. JUnit API </a> </span>\r\n                    <span className=\"mblock\">\r\n                        <p> 실행 순서 :</p>\r\n                        <p> BeforeClass {\"->\"} Before {\"->\"} Test코드 {\"->\"} After {\"->\"} AfterClass</p>\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @BeforeClass(Junit4) , @BeforeAll(JUnit5) </i> :  </p>\r\n                            <p> 전체 테스트에서 한번 실행 , 전체 </p>\r\n                        </span>\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @Before(Junit4) , @BeforeEach(Juni5) </i> :  </p>\r\n                            <p> 모든 테스트가 있을 떄마다 실행 </p>\r\n                        </span>\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @After (Junit4) , @AfterEach (JUnit5) </i> :  </p>\r\n                            <p>  </p>\r\n                        </span>\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @AfterClass(Junit4) , @AfterAll(JUnit5) </i> :  </p>\r\n                            <p>  </p>\r\n                        </span>\r\n                    </span>\r\n                </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"객체\"> 2. 객체 </a> </span>\r\n                    <span className=\"mblock\">\r\n                        <span className=\"sblock\">\r\n                            <p> <i> Model </i> : 서블릿에서 request에 값을 담아 보내주었는데 이러한 역할을 담당한다.  </p>\r\n                        </span>\r\n                    </span>\r\n                </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"파라미터\"> 3. 파라미터 </a> </span>\r\n                    <span className=\"mblock\">\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @RequestParam </i> :</p>\r\n                            <p>  </p>\r\n                        </span>\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @ModelAttribute </i> : 서  </p>\r\n                        </span>\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @PathVariable </i> : 서  </p>\r\n                        </span>\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @CookieValue </i> : 서  </p>\r\n                        </span>\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @RequestHeader </i> : 서  </p>\r\n                        </span>\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @RequestHeader </i> : 서  </p>\r\n                        </span>\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @RequestBody </i> : 서  </p>\r\n                        </span>\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @Value </i> : 서  </p>\r\n                        </span>\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @Valid </i> : 서  </p>\r\n                        </span>\r\n                    </span>\r\n                </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"API\"> 4. API</a> </span>\r\n                    <span className=\"mblock\">\r\n                        <span className=\"sblock\">\r\n                            <p> <i> @ResponseBody 메소드선언</i> : http통신의 body부분에 직접 보낸다.\r\n                                HTML형식이 아닌 text형식 </p>\r\n                            <p> @ResponserBody를 컨테이너가 보면 viewResolver로 보내지 않고\r\n                                HttpMessageConverter로 보내면 JsonConveter와 StringConveter방식으로 구분\r\n                            </p>\r\n                            <p>@GetMapping(\"hello-string\")</p>\r\n                            <p>@ResponseBody</p>\r\n                            <p>public String helloString(@RequestParam(\"name\") String name) {\"{\"}</p>\r\n                            <p>&nbsp;&nbsp;return \"hello\" + name;</p>\r\n                            <p> {\"}\"} </p>\r\n                            <br />\r\n                            <p> 아래와 같은 방식으로 리턴값을 객체로 주면 키와값으로 나와 json방식으로 사용이\r\n                                가능할것 같다 , 겟터셋터방식 ,프로퍼티 방식이라고 불린다?\r\n                            </p>\r\n                            <p>@GetMapping(\"hello-string\")</p>\r\n                            <p>@ResponseBody</p>\r\n                            <p>public String helloString(@RequestParam(\"name\") String name) {\"{\"}</p>\r\n                            <p>&nbsp;&nbsp; 클래스 객체 = new 클래스(); </p>\r\n                            <p>&nbsp;&nbsp; 클래스.setName(name); </p>\r\n                            <p>&nbsp;&nbsp; return 객체</p>\r\n                            <p> {\"}\"} </p>\r\n                        </span>\r\n                    </span>\r\n                </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"메소드\"> 5. 메소드 </a> </span>\r\n                    <span className=\"mblock\">\r\n                        <p> <i> AnnotationConfigApplicationContext(Config클래스명.class) </i> :\r\n                            @Test 테스트 코드에서 @Configuration 객체를 불러오는 것 같다.</p>\r\n                        <span className=\"sblock\">\r\n                            <p> ApplicationContext ac = new AnnotionConfigApplicationCOntext(Config클래스명.class); </p>\r\n                            <p> ac.getBean(\"\",.class); </p>\r\n                        </span>\r\n\r\n                    </span>\r\n                </span>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpringCode;","import React from 'react';\r\n\r\nconst SpringExCode1 = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"lblocknav_container\">\r\n                <div className=\"lblocknav\">\r\n                    <span className=\"mtitle\">\r\n                        <p> SpringExcode1 </p>\r\n                    </span>\r\n                    <p className=\"hyperlink\">\r\n                        <details>\r\n                            <summary> demo </summary>\r\n                            <details>\r\n                                <summary> src</summary>\r\n                                <details>\r\n                                    <summary className=\"col_r\"> main </summary>\r\n                                    <details>\r\n                                        <summary> java</summary>\r\n                                        <details>\r\n                                            <summary> 패키지명 </summary>\r\n                                            <details>\r\n                                                <summary className=\"col_g\"> controller </summary>\r\n                                                <a href=\"#UserController\" className=\"col_p\"> UserController </a>\r\n                                            </details>\r\n                                            <details>\r\n                                                <summary className=\"col_g\"> entity </summary>\r\n                                                <a href=\"#User\" className=\"col_p\"> User </a>\r\n                                            </details>\r\n                                            <details>\r\n                                                <summary className=\"col_g\"> repository </summary>\r\n                                                <a href=\"#UserRepository\" className=\"col_p\"> UserRepository </a>\r\n                                            </details>\r\n                                            <details>\r\n                                                <summary className=\"col_g\"> service </summary>\r\n                                                <details>\r\n                                                    <summary className=\"col_g\"> serviceImpl </summary>\r\n                                                    <a href=\"#UserService\" className=\"col_p\"> UserService</a>\r\n                                                </details>\r\n                                                <a href=\"#UserRepository\" className=\"col_p\"> UserRepository </a>\r\n                                            </details>\r\n                                            <p> <a href=\"#DemoApplication\" className=\"col_p\"> DemoApplication </a> </p>\r\n                                        </details>\r\n                                    </details>\r\n                                    <details>\r\n                                        <summary> resources </summary>\r\n                                        <details>\r\n                                            <summary className=\"col_g\"> static </summary>\r\n                                        </details>\r\n                                        <details>\r\n                                            <summary className=\"col_g\"> templates </summary>\r\n                                        </details>\r\n                                        <p> <a className=\"col_p\" href=\"#\"> application.properties </a> </p>\r\n                                    </details>\r\n                                    <a href=\"#build.gradle\" className=\"col_p\"> build.gradle </a>\r\n                                </details>\r\n                                <details>\r\n                                    <summary className=\"col_r\"> test </summary>\r\n                                    <details>\r\n                                        <summary> java </summary>\r\n                                    </details>\r\n                                </details>\r\n                            </details>\r\n                        </details>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div className=\"common_style\" >\r\n                <span className=\"lblock\">\r\n                    <span className=\"mtitle\"> <a name=\"\">  Spring-Gradle-JPA-MySQL </a> </span>\r\n                    <p> <small> 스프링 Gradel을 이용하여 MySQL에 넣어보는 예제 Postman을 사용하여 파라미터를 입력하여\r\n                        MySQL에 저장하고 삭제하는 것 까지\r\n                    </small> </p>\r\n                    <span className=\"mblock\">\r\n                        <span className=\"stitle\"> <a name=\"Directory\">  Directory </a> </span>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringExCode1/Directory_1.PNG'} /> </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <span className=\"stitle\"> <a name=\"UserController\">  controller/UserController.java </a> </span>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringExCode1/UserController_1.PNG'} /> </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <span className=\"stitle\"> <a name=\"Users\">  entity/Users.java </a> </span>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringExCode1/Users_1.PNG'} /> </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <span className=\"stitle\"> <a name=\"UserRepository\">  repository/UserRepository.java </a> </span>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringExCode1/UserRepository_1.PNG'} /> </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <span className=\"stitle\"> <a name=\"UserServiceImpl\">  service/serviceImpl/UserServiceImpl.java </a> </span>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringExCode1/UserServiceImpl_1.PNG'} /> </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <span className=\"stitle\"> <a name=\"UserService\">  service/UserService.java </a> </span>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringExCode1/UserService_1.PNG'} /> </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <span className=\"stitle\"> <a name=\"application.properties\">  resources/application.properties </a> </span>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringExCode1/UserRepository_1.PNG'} /> </p>\r\n                    </span>\r\n                    <span className=\"mblock\">\r\n                        <span className=\"stitle\"> <a name=\"build.gradle\">  build.gradle </a> </span>\r\n                        <p> <img src={process.env.PUBLIC_URL + '/img/SpringExCode1/build.gradle_1.PNG'} /> </p>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default SpringExCode1;\r\n\r\n\r\n{/* <div className=\"lblocknav_container\">\r\n<div className=\"lblocknav\">\r\n    <span className=\"mtitle\">\r\n        <p> SpringExcode1 </p>\r\n    </span>\r\n    <p className=\"hyperlink\">\r\n        <details>\r\n            <summary> demo </summary>\r\n            <details>\r\n                <summary> src</summary>\r\n                <details>\r\n                    <summary className=\"col_r\"> main </summary>\r\n                    <details>\r\n                        <summary> java</summary>\r\n                        <details>\r\n                            <summary> 패키지명 </summary>\r\n                            <details>\r\n                                <summary className=\"col_g\"> controller </summary>\r\n                            </details>\r\n                            <details>\r\n                                <summary className=\"col_g\"> entity </summary>\r\n                            </details>\r\n                            <details>\r\n                                <summary className=\"col_g\"> repository </summary>\r\n                            </details>\r\n                            <details>\r\n                                <summary className=\"col_g\"> service </summary>\r\n                            </details>\r\n                            <p> <a className=\"col_p\" href=\"#\"> DemoApplication </a> </p>\r\n                        </details>\r\n                    </details>\r\n                    <details>\r\n                        <summary> resources </summary>\r\n                        <details>\r\n                            <summary className=\"col_g\"> static </summary>\r\n                        </details>\r\n                        <details>\r\n                            <summary className=\"col_g\"> templates </summary>\r\n                        </details>\r\n                        <p> <a className=\"col_p\" href=\"#\"> application.properties </a> </p>\r\n                    </details>\r\n                </details>\r\n                <details>\r\n                    <summary className=\"col_r\"> test </summary>\r\n                    <details>\r\n                        <summary> java </summary>\r\n                    </details>\r\n                </details>\r\n            </details>\r\n        </details>\r\n    </p>\r\n</div>\r\n</div> */}","import React from 'react';\r\n\r\nconst WindowCommand = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. 윈도우 명령어 (하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#톰캣 라이브러리\">1. </a>\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            {/* <p> <img src={process.env.PUBLIC_URL + '/img/SpringBootLibrary.png'} /> </p> */}\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\"> 1.cmd 명령어  </a> </span>\r\n                <p> <i> cd 폴더 </i>  : 폴더로 이동 </p>\r\n                <p> <i> cd.. </i>  : 이전 폴더로 돌아가기 </p>\r\n                <p> <i> dir </i>  : 폴더가 포함하고 있는 파일 목록 보여주기 </p>\r\n                <p> <i> 파일명 tasks </i>  : 파일로 실행할 수 있는 명령어 보여주기 </p>\r\n                <span className=\"mblock\">\r\n                    {/* <h3> HTML </h3>\r\n                    <h3> 자바 클래스 </h3> */}\r\n                </span>\r\n\r\n            </span>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default WindowCommand;","import React from 'react';\r\n\r\nconst KeyMap = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. 단축키 (하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#Intellij 단축키\">1. Intellij 단축키 </a>\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            {/* <p> <img src={process.env.PUBLIC_URL + '/img/SpringBootLibrary.png'} /> </p> */}\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"Intellij 단축키\"> 1.Intellij 단축키  </a> </span>\r\n                <p> <a href=\"https://gmlwjd9405.github.io/2019/05/21/intellij-shortkey.html\" target=\"_blank\"> 참고 </a></p>\r\n                <p> <i> Alt + 1 </i>  : Project View 열고 닫기 </p>\r\n                <p> <i> Ctrl + Shift + T </i>  : 테스트 코드 작성 </p>\r\n                <p> <i> Shift + F6 </i>  : 이름 변경(동일이름 전부 변경) </p>\r\n                <p> <i> Ctrl + D </i>  : 코드 한줄 아래 복사 붙여넣기 </p>\r\n                <p> <i> Ctrl + X </i>  : 코드 한줄 지우기 </p>\r\n                <p> <i> Ctrl + A </i>  : 코드 전체 드래그 </p>\r\n                <p> <i> Alt + Insert </i>  : 생성자, getter,setter 등 </p>\r\n                <p> <i> Alt + Enter </i>  :  코드 수정 제안 </p>\r\n                <p> <i> Alt + Shift + 방향키 </i>  :  코드 라인 위치 옮기기 </p>\r\n                <p> <i> Ctrl + / </i>  : 해당 줄 주석 처리 </p>\r\n                <p> <i> Ctrl + E </i>  : 최근 실행 파일 확인 </p>\r\n                <p> <i> Ctrl + B </i>  : 코드에서 선택된 필드 코드로 이동 </p>\r\n                <p> <i> Alt + F7 </i>  : 항목이 사용된 위치를 모두 표시 </p>\r\n                <p> <i> Ctrl + W </i>  : 코드 주위 영역 드래그 확대 </p>\r\n                <p> <i> Ctrl + Shift + W </i>  : 코드 주위 영역 드래그 축소 </p>\r\n                <p> <i> Shift + Ctrl + A </i>  : 모든 액션을 검색 가능  </p>\r\n                <p> <i>  </i>  :  </p>\r\n                <p> <i>  </i>  :  </p>\r\n                <span className=\"mblock\">\r\n                    {/* <h3> HTML </h3>\r\n                    <h3> 자바 클래스 </h3> */}\r\n                </span>\r\n\r\n            </span>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default KeyMap;","import React from 'react';\r\n\r\nconst CssBasic = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. (하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#\"> </a>\r\n                        {/* <a href=\"#\"> </a> */}\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <p> 개발 방식 </p>\r\n                <span className=\"mblock\">\r\n                    <p> <i> TDD (테스트 주도 개발) </i>: 단위테스트를 작성 {\"->\"} 구현 클래스믈 작성 {\"->\"} 통합테스트 {\"->\"} </p>\r\n                </span>\r\n                <p> 스프링 </p>\r\n                <span className=\"mblock\">\r\n                    <p> <i> DI(의존성 주입) </i> : 객체 의존 관계를 외부에서 넣어주는 방법 @Autowired로 스프링에서는 넣어줌 </p>\r\n                </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <p> <i> Component 스캔 </i> : @Controller @Service @Repository 등에서 @Component를 가지고 있어\r\n                        Component스캔 이라고 불린다 @Component는 스프링 빈에 자동 등록이 된다</p>\r\n                </span>\r\n                <p> 웹 </p>\r\n                <span className=\"mblock\">\r\n                    <p> <i> URL 과 URI </i> </p>\r\n                    <p> URL : 자원 접근 </p>\r\n                    <p> URI : 식별자 접근 </p>\r\n                </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <p> <i> REST API(Represetational State Transfe) </i> </p>\r\n                    <p> REST </p>\r\n                    <p> <i> Uniform Interface (유니폼 인터페이스) </i> HTTP표준이면 어떤 플랫폼에서도 사용가능</p>\r\n                    <p> <i> Stateless (상태 정보 유지 안함) </i> Stateless 방식</p>\r\n                    <p> <i> Cacheable (캐시 가능) </i> http캐싱기능 적용 가능</p>\r\n                    <p> <i> Self-descriptiveness (자체 표현 구조) </i> rest api 메시지만 보고도 이해할 수 있는 구조</p>\r\n                    <p> <i> Client-Server </i> 서버는 api(자원)를 제공하고 클라이언트는 사용만 함</p>\r\n                    <p> <i> Layerd System (계층화) </i>  </p>\r\n                    <p> <i> REST API 설계 규칙 </i></p>\r\n                    <p> 웹(서버)에 존재하는 자원에 URI를 주고 자원을 정의</p>\r\n                    <p> http method(get,put 등)으로 표현 </p>\r\n                    <p> <i> RESTFUL API </i></p>\r\n                    <p> 개발자들이 비공식적으로 의견을 제시한 거라 명확한 정의는 없다?? </p>\r\n                    <p> 개인적인 느낌은 좀더 보기 편하게 만든 듯한 느낌 :id 와 같이 나중에 자세히 알아보기</p>\r\n                </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <p> <i> JPA(Java Persistence API) </i> </p>\r\n                    <p> 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 인터페이스 </p>\r\n                    <p> SQL언어가 아닌 자바 언어를 사용하여 객체지향 관점으로 관리할 수 있게 해준다.</p>\r\n                    <p> 개발자가 DB작업에 집중을 덜 하여도 되고 CRUD를 사용하기 쉬우며 SQL을 수정하기도 쉽고\r\n                        객체와 DB에 넣은 데이터타입의 불일치도 해결을 해준다.\r\n                    </p>\r\n                    <span className=\"sblock\">\r\n                        <p> <i> JPQL(Java Persistence Query Language)</i> </p>\r\n                        <p> 자바 객체를 이용하여 SQL 쿼리를 이용할 수 있는 언어</p>\r\n                        <p> <i> Hibernate</i> </p>\r\n                        <p> JPA(인터페이스)의 구현체 </p>\r\n                        <p> JPA를 사용하기 위해서 필수로 사용해야할 필요는 없다. </p>\r\n                        <p> 다른 구현체 ( DataNucleus,EclipseLink 등) 사용 가능 혹은 사용자 정의 구현체로도 사용 가능</p>\r\n                        <p> <i> Spring Data JPA</i></p>\r\n                        <p> Repository 인터페이스로 메소드를 입력하면 적절한 쿼리를 날려준다. </p>\r\n                        <p> <i> JDBC API </i></p>\r\n                        <p> JPA를 사용하면 SQL을 보내 DB와 통신하는 API 직접적으로 사용하는 일은 없다. </p>\r\n                    </span>\r\n                </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <p> <i> </i> </p>\r\n                </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <p> <i> </i> </p>\r\n                </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <p> <i> </i> </p>\r\n                </span>\r\n                <p> </p>\r\n                <span className=\"mblock\">\r\n                    <p> <i> </i> </p>\r\n                </span>\r\n\r\n            </span>\r\n            {/* <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"sblock\">\r\n                    </span>\r\n                </span>\r\n            </span> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CssBasic;","import React from 'react';\r\n\r\nconst GithubBasic = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> 0. (하이퍼링크) </span>\r\n                <span className=\"mblock\">\r\n                    <p className=\"hyperlink\">\r\n                        <a href=\"#\"> </a>\r\n                        {/* <a href=\"#\"> </a> */}\r\n                    </p>\r\n                </span>\r\n            </span>\r\n            <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"sblock\">\r\n                    </span>\r\n                </span>\r\n            </span>\r\n            {/* <span className=\"lblock\">\r\n                <span className=\"mtitle\"> <a name=\"\">  </a> </span>\r\n                <span className=\"lblock\">\r\n                    <span className=\"sblock\">\r\n                    </span>\r\n                </span>\r\n            </span> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GithubBasic;","import React from 'react';\r\nimport HtmlBasic from './Main/HtmlContent/HtmlBasic';\r\nimport CssBasic from './Main/CssContent/CssBasic';\r\nimport JspServletInformation from './Main/JspServletContent/JspServletInformation';\r\nimport JavaBasic from './Main/JavaContent/JavaBasic';\r\nimport JspServletBasic from './Main/JspServletContent/JspServletBasic';\r\nimport JspServletBulletinBoard from './Main/JspServletContent/JspServletBulletinBoard';\r\nimport JspServletJstl from './Main/JspServletContent/JspServletJstl';\r\nimport JspServletEl from './Main/JspServletContent/JspServletEl';\r\nimport ReactBasic from './Main/ReactContent/ReactBasic';\r\nimport SpringInformation from './Main/SpringContent/SpringInformation';\r\nimport SpringBasic from './Main/SpringContent/SpringBasic';\r\nimport SpringLibrary from './Main/SpringContent/SpringLibrary';\r\nimport SpringError from './Main/SpringContent/SpringError';\r\nimport SpringCode from './Main/SpringContent/SpringCode';\r\nimport SpringExCode1 from './Main/SpringContent/SpringExCode1';\r\nimport WindowCommand from './Main/WindowContent/WindowCommand';\r\nimport KeyMap from './Main/KeyMapContent/KeyMap';\r\nimport Term from './Main/TermContent/Term';\r\nimport Github from './Main/GithubContent/GithubBasic';\r\nimport './Main.css';\r\nimport './commonStyle.css';\r\n\r\nconst Main = (props) => {\r\n    const showpage = () => {\r\n        switch (props.page2) {\r\n            case 'htmlbasic':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> HTML기본문법 </h2>\r\n                    <HtmlBasic> </HtmlBasic>\r\n                </div>;\r\n            case 'cssbasic':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> Css기본문법 </h2>\r\n                    <CssBasic> </CssBasic>\r\n                </div>;\r\n            // React\r\n            case 'reactbasic':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> React 기초 </h2>\r\n                    <ReactBasic> </ReactBasic>\r\n                </div>;\r\n            //Java\r\n            case 'javabasic':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> 자바 문법 </h2>\r\n                    <JavaBasic> </JavaBasic>\r\n                </div>;\r\n\r\n            // JSP & Servlet\r\n            case 'jspservletinformation':\r\n                return <JspServletInformation> </JspServletInformation>;\r\n            case 'jspservletbasic':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> JSP &amp; Servlet 문법 </h2>\r\n                    <JspServletBasic> </JspServletBasic>\r\n                </div>;\r\n            case 'jspservletbulletinboard':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> JSP &amp; Servlet 게시판 </h2>\r\n                    <JspServletBulletinBoard> </JspServletBulletinBoard>\r\n                </div>;\r\n            case 'jspservletjstl':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> JSP &amp; Servlet JSTL </h2>\r\n                    <JspServletJstl> </JspServletJstl>\r\n                </div>;\r\n            case 'jspservletel':\r\n                return <JspServletEl> </JspServletEl>;\r\n            // 스프링 프레임워크\r\n            case 'springinformation':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> Spring 정보 </h2>\r\n                    <SpringInformation> </SpringInformation>\r\n                </div>;\r\n\r\n            case 'springbasic':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> Spring 기초 </h2>\r\n                    <SpringBasic> </SpringBasic>\r\n                </div>;\r\n\r\n            case 'springlibrary':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> Spring 라이브러리 </h2>\r\n                    <SpringLibrary> </SpringLibrary>\r\n                </div>;\r\n\r\n            case 'springerror':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> Spring 오류 </h2>\r\n                    <SpringError> </SpringError>\r\n                </div>;\r\n\r\n            case 'springcode':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> Spring 코드 </h2>\r\n                    <SpringCode> </SpringCode>\r\n                </div>;\r\n            case 'springexcode1':\r\n                return <SpringExCode1> </SpringExCode1>;\r\n\r\n            //윈도우\r\n            case 'windowcommand':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> 윈도우 명령어 </h2>\r\n                    <WindowCommand> </WindowCommand>\r\n                </div>;\r\n            //용어\r\n            case 'term':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> 용어 </h2>\r\n                    <Term> </Term>\r\n                </div>;\r\n            //단축키\r\n            case 'keymap':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> 단축키 </h2>\r\n                    <KeyMap> </KeyMap>\r\n                </div>;\r\n            //github\r\n            case 'githubbasic':\r\n                return <div className=\"common_style\">\r\n                    <h2 className=\"subject\"> 깃허브 </h2>\r\n                    <Github> </Github>\r\n                </div>;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"main\">\r\n            {showpage()}\r\n        </div>);\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nconst HtmlList = (props) => {\r\n\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"htmllist\">\r\n            <button onClick={() => { send('htmlbasic'); }}> HTML 기본 문법 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HtmlList;","import React from 'react';\r\n\r\nconst CssList = (props) => {\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"csslist\">\r\n            <button onClick={() => { send('cssbasic') }}> CSS 기본 문법 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CssList;","import React from 'react';\r\n\r\nconst JavaSciptList = (props) => {\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"javasciptlist\">\r\n            <button onClick={() => { send('javascript') }}> JS 기본 문법 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JavaSciptList;","import React from 'react';\r\n\r\nconst ReactList = (props) => {\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"reactlist\">\r\n            <button onClick={() => { send('reactbasic') }}> react 기초 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReactList;","import React from 'react';\r\n\r\nconst JavaList = (props) => {\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"Javalist\">\r\n            <button onClick={() => { send('javabasic') }}> JAVA 문법 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JavaList;","import React from 'react';\r\n\r\nconst PhpList = (props) => {\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"phplist\">\r\n            <button onClick={() => { send('php') }}> PHP 기본 문법 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PhpList;","import React from 'react';\r\n\r\nconst NodeJsList = (props) => {\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"nodejslist\">\r\n            <button onClick={() => { send('nodejs') }}> NodeJs 기본 문법 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NodeJsList;","import React from 'react';\r\n\r\nconst JspServletList = (props) => {\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"jspservletlist\">\r\n            <button onClick={() => { send('jspservletinformation') }}> JSP&amp;Servlet 정보 </button>\r\n            <button onClick={() => { send('jspservletbasic') }}> JSP&amp;Servlet 코드 </button>\r\n            <button onClick={() => { send('jspservletbulletinboard') }}> JSP&amp;Servlet 게시판만들기 </button>\r\n            <button onClick={() => { send('jspservletjstl') }}> JSP JSTL </button>\r\n            <button onClick={() => { send('jspservletel') }}> JSP EL </button>\r\n            <button onClick={() => { send('테스트') }}> 테스트 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default JspServletList;","import React from 'react';\r\n\r\nconst SpringList = (props) => {\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"springlist\">\r\n            <button onClick={() => { send('springinformation') }}> Spring 프레임워크 정보 </button>\r\n            <button onClick={() => { send('springbasic') }}> Spring 기초 </button>\r\n            <button onClick={() => { send('springlibrary') }}> Spring 라이브러리 </button>\r\n            <button onClick={() => { send('springerror') }}> Spring 오류 </button>\r\n            <button onClick={() => { send('springcode') }}> Spring 코드 </button>\r\n            <button onClick={() => { send('springexcode1') }}> Spring 예제코드1 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SpringList;","import React from 'react';\r\n\r\nconst WindowList = (props) => {\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"windowlist\">\r\n            <button onClick={() => { send('windowcommand') }}> 윈도우 명령어 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WindowList;","import React from 'react';\r\n\r\nconst TermList = (props) => {\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"csslist\">\r\n            <button onClick={() => { send('term') }}> 용어 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TermList;","import React from 'react';\r\n\r\nconst KeyMapList = (props) => {\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"keymaplist\">\r\n            <button onClick={() => { send('keymap') }}> 단축키 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default KeyMapList;","import React from 'react';\r\n\r\nconst GithubList = (props) => {\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n\r\n    return (\r\n        <div className=\"githubList\">\r\n            <button onClick={() => { send('githubbasic') }}> 깃허브 </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GithubList;","import React, { useState } from 'react';\r\nimport './NavMenu.css';\r\n\r\nconst NavMenu = (props) => {\r\n\r\n    function send(page) {\r\n        props.onChangePage(page)\r\n    }\r\n\r\n    return (\r\n        <div className=\"navMenu\">\r\n            <div className=\"firstMenu menu\">\r\n                <p> 백엔드 </p>\r\n                <button onClick={() => { send(\"java\") }}> JAVA </button>\r\n                <button onClick={() => { send(\"php\") }}> PHP </button>\r\n                <button onClick={() => { send(\"nodejs\") }}> Node.js </button>\r\n                <button onClick={() => { send(\"spring\") }}> Spring </button>\r\n                <button onClick={() => { send(\"jspservlet\") }}> JSP&amp;servlet </button>\r\n            </div>\r\n            <div className=\"secondMenu menu\">\r\n                <p> 프론트엔드 </p>\r\n                <button onClick={() => { send(\"html\") }}> HTML </button>\r\n                <button onClick={() => { send(\"css\") }}> CSS </button>\r\n                <button onClick={() => { send(\"javascript\") }}> JavaScipt </button>\r\n                <button onClick={() => { send(\"typescript\") }}> TypeScipt </button>\r\n                <button onClick={() => { send(\"react\") }}> React </button>\r\n            </div>\r\n            <div className=\"thirdMenu menu\">\r\n                <p> 기타 </p>\r\n                <button onClick={() => { send(\"oracledb\") }}> OracleDB </button>\r\n                <button onClick={() => { send(\"mysql\") }}> MySQL </button>\r\n                <button onClick={() => { send(\"mariadb\") }}> MariaDB </button>\r\n                <button onClick={() => { send(\"mongodb\") }}> MongoDB </button>\r\n                <button onClick={() => { send(\"designpattern\") }}> 디자인패턴 </button>\r\n                <button onClick={() => { send(\"security\") }}> 보안</button>\r\n                <button onClick={() => { send(\"network\") }}> 네트워크</button>\r\n                <button onClick={() => { send(\"algorithm\") }}> 알고리즘 </button>\r\n                <button onClick={() => { send(\"contructdata\") }}> 자료구조 </button>\r\n                <button onClick={() => { send(\"was\") }}> WAS </button>\r\n                <button onClick={() => { send(\"prettier\") }}> prettier </button>\r\n                <button onClick={() => { send(\"window\") }}> window</button>\r\n                <button onClick={() => { send(\"term\") }}> 용어 </button>\r\n                <button onClick={() => { send(\"keymap\") }}> 단축키 </button>\r\n                <button onClick={() => { send(\"github\") }}> 깃허브 </button>\r\n                <button className=\"block\">  효율적인 코드 작성 </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavMenu;","import HtmlList from './LsideMenu/HtmlList.jsx';\r\nimport CssList from './LsideMenu/CssList.jsx';\r\nimport JavaSciptList from './LsideMenu/JavaSciptList.jsx';\r\nimport ReactList from './LsideMenu/ReactList.jsx';\r\nimport JavaList from './LsideMenu/JavaList.jsx';\r\nimport PhpList from './LsideMenu/PhpList.jsx';\r\nimport NodeJsList from './LsideMenu/NodeJsList.jsx';\r\nimport JspServletList from './LsideMenu/JspServletList.jsx';\r\nimport SpringList from './LsideMenu/SpringList.jsx';\r\nimport WindowList from './LsideMenu/WindowList.jsx';\r\nimport TermList from './LsideMenu/TermList.jsx';\r\nimport KeyMapList from './LsideMenu/KeyMapList.jsx';\r\nimport GithubList from './LsideMenu/GithubList.jsx';\r\nimport './NavMenu2.css';\r\n\r\n\r\nconst NavMenu2 = (props) => {\r\n\r\n    function send(page) {\r\n        props.onChangePage(page)\r\n    }\r\n    function send(page2) {\r\n        props.onChangePage(page2)\r\n    }\r\n    function changeTitle(title) {\r\n        document.querySelector(\"title\").innerHTML = title;\r\n    }\r\n\r\n\r\n    // NavMenu.jsx에서 선택한 목록을 보여주고 LsideMenu.jsx에서 클릭한 목록을 Main.jsx에 보여준다.\r\n    const showpage = () => {\r\n        // 프론트 엔드 메뉴\r\n        if (props.page === 'html') {\r\n            { changeTitle('html') }\r\n            return <HtmlList onChangePage={(page2) => { send(page2) }}> </HtmlList>;\r\n        }\r\n        else if (props.page === 'css') {\r\n            return <CssList onChangePage={(page2) => { send(page2) }}> </CssList>;\r\n        }\r\n        else if (props.page === 'javascript') {\r\n            return <JavaSciptList onChangePage={(page2) => { send(page2) }}> </JavaSciptList>;\r\n        }\r\n        else if (props.page === 'react') {\r\n            return <ReactList onChangePage={(page2) => { send(page2) }}> </ReactList>;\r\n        }\r\n        // 백엔드 메뉴\r\n        else if (props.page === 'java') {\r\n            return <JavaList onChangePage={(page2) => { send(page2) }}> </JavaList>;\r\n        }\r\n        else if (props.page === 'php') {\r\n            return <PhpList onChangePage={(page2) => { send(page2) }}> </PhpList>;\r\n        }\r\n        else if (props.page === 'nodejs') {\r\n            return <NodeJsList onChangePage={(page2) => { send(page2) }}> </NodeJsList>;\r\n        }\r\n        else if (props.page === 'spring') {\r\n            return <SpringList onChangePage={(page2) => { send(page2) }}> </SpringList>;\r\n        }\r\n        else if (props.page === 'jspservlet') {\r\n            return <JspServletList onChangePage={(page2) => { send(page2) }}> </JspServletList>;\r\n        }\r\n        //기타 메뉴\r\n        else if (props.page === 'window') {\r\n            return <WindowList onChangePage={(page2) => { send(page2) }}> </WindowList>;\r\n        }\r\n        else if (props.page === 'term') {\r\n            return <TermList onChangePage={(page2) => { send(page2) }}> </TermList>;\r\n        }\r\n        else if (props.page === 'keymap') {\r\n            return <KeyMapList onChangePage={(page2) => { send(page2) }}> </KeyMapList>;\r\n        }\r\n        else if (props.page === 'github') {\r\n            return <GithubList onChangePage={(page2) => { send(page2) }}> </GithubList>;\r\n        }\r\n        else {\r\n            return <div> </div>;\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"navMenu2\">\r\n            <div className=\"menu\">\r\n                <p> {props.page} </p>\r\n                <div>\r\n                    {showpage()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavMenu2;","import React, { useState } from 'react';\nimport './App.css';\nimport Main from './components/Main.jsx';\nimport LsideMenu from './components/LsideMenu';\nimport RsideMenu from './components/RsideMenu';\nimport NavMenu from './components/NavMenu';\nimport NavMenu2 from './components/NavMenu2';\n\nconst App = () => {\n  const [whatPage,setWhatPage] = useState('main');\n  const [whatPage2,setWhatPage2] = useState('main');\n\n  const changePage = (page,e) => {\n    setWhatPage(page);\n  }\n\n  const changePage2 = (page2,e) => {\n    setWhatPage2(page2);\n  }\n\n\n  return (\n      <div className=\"app\">\n        <NavMenu onChangePage={(page)=>{{changePage(page)}}}> </NavMenu>\n        <NavMenu2 page={whatPage} onChangePage={(page2)=>{{changePage2(page2)}}}> </NavMenu2>\n        <div className=\"menu_container\"> \n        {/* LsideMenu는 NavMenu에서 page 파라미터를 받고 onChangePage로 Main 컴포넌트 변경 */}\n          {/* <LsideMenu page={whatPage} onChangePage={(page2)=>{{changePage2(page2)}}}> </LsideMenu> */}\n          <Main page2={whatPage2}> </Main>\n          {/* <RsideMenu> </RsideMenu> */}\n        </div>\n      </div>\n\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}