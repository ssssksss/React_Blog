import React, { useEffect, useRef, useState } from 'react';

const CssError = (props) => {
    const [scrollY, setScrollY] = useState(0);
    function logit() {
        setScrollY(window.pageYOffset);

        //ÏúÑÏπò Í≥ÑÏÇ∞
        let elementHeight = document.getElementsByClassName('navMenu')[0].scrollHeight +
            document.getElementsByClassName('navMenu2')[0].scrollHeight + 26;
        let testLeft = document.getElementsByClassName('navMenu2')[0].getBoundingClientRect().left;
        let testdis = document.getElementsByClassName('common_style')[0].getBoundingClientRect().left
            - document.getElementsByClassName('lblocknav_container')[0].getBoundingClientRect().left;
        // console.log(window.outerHeight);


        // Ï¢åÏ∏° Î©îÎâ¥ Ïù¥Îèô + ÏûëÏùÄ Î≤ÑÌäº
        if (document.documentElement.scrollTop > elementHeight && window.innerWidth < 1024) {
            blockRef.current[0].style.position = 'fixed';
            blockRef.current[0].style.top = (elementHeight + 30) + "px";
            blockRef.current[0].style.left = document.getElementsByClassName('navMenu2')[0].getBoundingClientRect().left + "px";
            blockRef.current[0].style.maxWidth = '420px';
            blockRef.current[1].style.left = '25%';
            blockRef.current[0].style.height = window.outerHeight;
            blockRef.current[0].style.display === 'inline-block' ?
                document.getElementsByClassName('lblocknav_btn')[0].style.display = 'none' :
                document.getElementsByClassName('lblocknav_btn')[0].style.display = 'inline-block';
        }
        // Ï¢åÏ∏° Î©îÎâ¥ Ïù¥Îèô
        else if (document.documentElement.scrollTop < elementHeight && window.innerWidth > 1023) {
            // Ï¢åÏ∏° Î©îÎâ¥ ÏúÑÏπò Í≥†Ï†ï, Î≥¥Ïó¨Ï£ºÍ∏∞ , Í∞ÑÍ≤©ÏùÄ ÏÇ¨Ïù¥Í∞í
            blockRef.current[0].style.position = 'fixed';
            blockRef.current[0].style.top = elementHeight + "px";
            blockRef.current[0].style.display = 'inline-block';
            blockRef.current[0].style.maxWidth = testdis + "px";
            blockRef.current[0].style.height = window.outerHeight;
            blockRef.current[0].style.left = document.getElementsByClassName('navMenu2')[0].getBoundingClientRect().left + "px";
            // Ï¢åÏ∏°Ïóê Î©îÎâ¥Í∞Ä ÏÉùÍ∏∞ÎØÄÎ°ú Î©îÏù∏ Î©îÎâ¥Î•º ÏôºÏ™ΩÏóêÏÑú Ïù¥ÎèôÏãúÌÇ¥
            blockRef.current[1].style.left = '25%';
            document.getElementsByClassName('lblocknav_btn')[0].style.display = 'none';
        }
        else if (document.documentElement.scrollTop > elementHeight && window.innerWidth > 1023) {
            // Ï¢åÏ∏° Î©îÎâ¥ ÏúÑÏπò Í≥†Ï†ï, Î≥¥Ïó¨Ï£ºÍ∏∞ , Í∞ÑÍ≤©ÏùÄ ÏÇ¨Ïù¥Í∞í
            blockRef.current[0].style.position = 'fixed';
            blockRef.current[0].style.top = "10px";
            blockRef.current[0].style.display = 'inline-block';
            blockRef.current[0].style.maxWidth = testdis + "px";
            blockRef.current[0].style.height = window.outerHeight;
            blockRef.current[0].style.left = document.getElementsByClassName('navMenu2')[0].getBoundingClientRect().left + "px";
            // Ï¢åÏ∏°Ïóê Î©îÎâ¥Í∞Ä ÏÉùÍ∏∞ÎØÄÎ°ú Î©îÏù∏ Î©îÎâ¥Î•º ÏôºÏ™ΩÏóêÏÑú Ïù¥ÎèôÏãúÌÇ¥
            blockRef.current[1].style.left = '25%';
            document.getElementsByClassName('lblocknav_btn')[0].style.display = 'none';
        }

    }

    const blockRef = useRef([]);

    useEffect(() => {
        function watchScroll() {
            window.addEventListener("scroll", logit);
        }
        watchScroll();
        return () => {
            window.removeEventListener("scroll", logit);
        };
    });

    return (
        <>
            <button className="lblocknav_btn" onClick={() => {
                blockRef.current[0].style.display === 'inline-block' ?
                    blockRef.current[0].style.display = 'none' :
                    blockRef.current[0].style.display = 'inline-block';
                document.getElementsByClassName('lblocknav_btn')[0].style.display = 'none';
            }}> ü¶â </button>
            <div className="lblocknav_container" ref={(elem) => (blockRef.current[0] = elem)}>
                <div className="lblocknav">
                    <span className="mtitle">
                        <a href="#" className="col_b"> <b> CssError Ïò§Î•òÎÇò ÏóêÎü¨ </b> </a>
                        <button className="lblocknav_btn2" onClick={() => {
                            document.getElementsByClassName('lblocknav_btn')[0].style.display = 'block';
                            document.getElementsByClassName('lblocknav_container')[0].style.display = 'none';

                        }}> ‚ùå </button>
                    </span>
                    <p className="hyperlink">
                        <details open>
                            <summary> ÏóêÎü¨ Î™®Ïùå </summary>
                            <a href="#" className="col_p"> </a>
                            <a href="#" className="col_p"> </a>
                        </details>
                    </p>
                </div>
            </div>
            <div className="common_style" ref={(elem) => (blockRef.current[1] = elem)} >
                <span className="lblock">
                    <span className="mtitle"> <a name=""> CssError Ïò§Î•òÎÇò ÏóêÎü¨ </a> </span>

                    <span className="mblock">
                        <span className="stitle"> <a name="">   </a> </span>
                        <span className="sblock">
                            <span className="sstitle"> </span>
                        </span>
                    </span>
                    {/* <span className="mblock">
                        <span className="stitle"> <a name="">   </a> </span>
                        <span className="sblock">
                            <span className="sstitle">  </span>
                        </span>
                    </span> */}
                    {/* <span className="mblock">
                        <span className="stitle"> <a name="">   </a> </span>
                        <span className="sblock">
                            <span className="sstitle"> </span>
                        </span>
                    </span> */}
                </span>
            </div>
        </>
    );
}
export default CssError;

